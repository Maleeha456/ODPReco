AnnotationAssertion(rdfs:label <actingfor.owl#actsThrough> "acts through"@en)AnnotationAssertion(rdfs:label <actingfor.owl#SocialAgent> "Agente sociale"@it)AnnotationAssertion(rdfs:label <actingfor.owl#Agent> "Agent"@en)AnnotationAssertion(rdfs:label <actingfor.owl#actsFor> "agisce per"@it)AnnotationAssertion(rdfs:comment <actingfor.owl#SocialAgent> "Any individual whose existence is granted simply by its social communicability and capability of action (through some PhysicalAgent)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <actingfor.owl#Agent> <actingfor.owl>)AnnotationAssertion(rdfs:comment <actingfor.owl#Agent> "Additional comment: a computational agent can be considered as a PhysicalAgent that realizes a certain class of algorithms (that can be considered as instances of InformationObject) that allow to obtain some behaviors that are considered typical of agents in general. For an ontology of computational objects based on DOLCE see e.g. and KCO.owl."^^xsd:string)AnnotationAssertion(rdfs:comment <actingfor.owl#actsFor> "The relation holding between any Agent, and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated'; e.g. a university can be acted for by a department, which on its turm is acted for by physical agents."^^xsd:string)AnnotationAssertion(rdfs:comment <actingfor.owl#actsThrough> "The relation holding between a PhysicalAgent and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated', e.g. a university can be acted for by a department, which is acted for by physical agents."^^xsd:string)AnnotationAssertion(rdfs:label <actingfor.owl#actsFor> "acts for"@en)AnnotationAssertion(rdfs:label <actingfor.owl#actsThrough> "agisce mediante"@it)AnnotationAssertion(rdfs:isDefinedBy <actingfor.owl#actsThrough> <actingfor.owl>)AnnotationAssertion(rdfs:isDefinedBy <actingfor.owl#SocialAgent> <actingfor.owl>)AnnotationAssertion(rdfs:label <actingfor.owl#SocialAgent> "Social agent"@en)AnnotationAssertion(rdfs:comment <actingfor.owl#Agent> "Any agentive Object , either physical (e.g. a whale, a robot, an oak), or social (e.g. a corporation, an institution, a community)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <actingfor.owl#actsFor> <actingfor.owl>)AnnotationAssertion(rdfs:label <actingfor.owl#Agent> "Agente"@it)
AnnotationAssertion(rdfs:comment <hasSANRecord> "SAN = Standard Algebraic Notation"^^xsd:string)AnnotationAssertion(rdfs:label <WhitePlayerRole> "WhitePlayerRole"^^xsd:string)AnnotationAssertion(rdfs:label <performedBy> "performedBy"^^xsd:string)AnnotationAssertion(rdfs:label <Agent> "Agent"^^xsd:string)AnnotationAssertion(rdfs:label <Place> "Place"^^xsd:string)AnnotationAssertion(rdfs:label <atTime> "atTime"^^xsd:string)AnnotationAssertion(rdfs:label <ChessGameManifestation> "ChessGameManifestation"^^xsd:string)AnnotationAssertion(rdfs:label <nextHalfMove> "nextHalfMove"^^xsd:string)AnnotationAssertion(rdfs:label <hasOpeningName> "hasOpeningName"^^xsd:string)AnnotationAssertion(rdfs:label <ChessGameResult> "ChessGameResult"^^xsd:string)AnnotationAssertion(rdfs:label <originatesFrom> "originatesFrom"^^xsd:string)AnnotationAssertion(rdfs:label <ChessGame> "ChessGame"^^xsd:string)AnnotationAssertion(rdfs:label <containsAnnotation> "containsAnnotation"^^xsd:string)AnnotationAssertion(rdfs:label <TemporalExtent> "TemporalExtent"^^xsd:string)AnnotationAssertion(rdfs:label <subEventOf> "subEventOf"^^xsd:string)AnnotationAssertion(rdfs:label <ActingPlayerRole> "ActingPlayerRole"^^xsd:string)AnnotationAssertion(rdfs:label <encodedAsSAN> "encodedAsSAN"^^xsd:string)AnnotationAssertion(rdfs:label <annotatesHalfMove> "annotatesHalfMove"^^xsd:string)AnnotationAssertion(rdfs:label <ChessCompetitionSeries> "ChessCompetitionSeries"^^xsd:string)AnnotationAssertion(rdfs:label <hasContent> "hasContent"^^xsd:string)AnnotationAssertion(rdfs:label <hasFirstHalfMove> "hasFirstHalfMove"^^xsd:string)AnnotationAssertion(rdfs:label <hasHalfMove> "hasHalfMove"^^xsd:string)AnnotationAssertion(rdfs:label <partOf> "partOf"^^xsd:string)AnnotationAssertion(rdfs:label <hasPGNFile> "hasPGNFile"^^xsd:string)AnnotationAssertion(rdfs:label <ChessCompetitionRound> "ChessCompetitionRound"^^xsd:string)AnnotationAssertion(rdfs:label <hasSANRecord> "hasSANRecord"^^xsd:string)AnnotationAssertion(rdfs:label <atPlace> "atPlace"^^xsd:string)AnnotationAssertion(rdfs:label <hasManifestation> "hasManifestation"^^xsd:string)AnnotationAssertion(rdfs:label <providesAgentRole> "providesAgentRole"^^xsd:string)AnnotationAssertion(rdfs:label <AuthorRole> "AuthorRole"^^xsd:string)AnnotationAssertion(rdfs:comment <hasECOCode> "ECO = Encyclopedia of Chess Opening"^^xsd:string)AnnotationAssertion(rdfs:comment <encodedAsSAN> "SAN = Standard Algebraic Notation"^^xsd:string)AnnotationAssertion(rdfs:label <ChessCompetitionInstance> "ChessCompetitionInstance"^^xsd:string)AnnotationAssertion(rdfs:comment <hasPGNFile> "PGN = Portable Game Notation"^^xsd:string)AnnotationAssertion(rdfs:label <hasLastHalfMove> "hasLastHalfMove"^^xsd:string)AnnotationAssertion(rdfs:label <Event> "Event"^^xsd:string)AnnotationAssertion(rdfs:label <ChessOpening> "ChessOpening"^^xsd:string)AnnotationAssertion(rdfs:label <hasECOCode> "hasECOCode"^^xsd:string)AnnotationAssertion(rdfs:label <HalfMove> "HalfMove"^^xsd:string)AnnotationAssertion(rdfs:label <HalfMoveAnnotation> "HalfMoveAnnotation"^^xsd:string)AnnotationAssertion(rdfs:label <hasOpening> "hasOpening"^^xsd:string)AnnotationAssertion(rdfs:label <BlackPlayerRole> "BlackPlayerRole"^^xsd:string)AnnotationAssertion(rdfs:label <AgentRole> "AgentRole"^^xsd:string)AnnotationAssertion(rdfs:label <hasResult> "hasResult"^^xsd:string)
AnnotationAssertion(rdfs:comment <climaticzone.owl#AquaticResource> "A fishery resource (a collection of actual aquatic organisms) that can include aquatic organisms from different AquaticSpecies, and is localized in some WaterArea.
It can be mapped to fi:AqResRef"^^xsd:string)AnnotationAssertion(rdfs:comment <climaticzone.owl#AquaticResourceObservation> "An observation of a resource characterised by different parameters."^^xsd:string)AnnotationAssertion(rdfs:label <climaticzone.owl#AquaticResourceObservation> "Aquatic resource observation"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#hasResource> "has resource"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#isClimaticZoneOf> "is climatic zone of"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#hasClimaticZone> "has climatic zone"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#AquaticResource> "Aquatic resource"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#isResourceOf> "is resource of"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#ClimaticZone> "Climatic zone"@en)AnnotationAssertion(rdfs:label <climaticzone.owl#hasReferenceYear> "has reference year"@en)
AnnotationAssertion(rdfs:isDefinedBy <description.owl#Concept> <description.owl>)AnnotationAssertion(rdfs:label <description.owl#isDefinedIn> "is defined in"@en)AnnotationAssertion(rdfs:comment <description.owl#defines> "A relation between a Description and a Concept, e.g. a Workflow for a governmental Organization defines the Role 'officer', or 'the Italian Traffic Law defines the role Vehicle'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <description.owl#isDefinedIn> <description.owl>)AnnotationAssertion(rdfs:label <description.owl#usesConcept> "uses concept"@en)AnnotationAssertion(rdfs:comment <description.owl#usesConcept> "A generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description. This last condition cannot be encoded for object properties in OWL."^^xsd:string)AnnotationAssertion(rdfs:label <description.owl#usesConcept> "usa il concetto"@it)AnnotationAssertion(rdfs:comment <description.owl#isDefinedIn> "A relation between a Description and a Concept, e.g. a Workflow for a governmental Organization defines the Role 'officer', or 'the Italian Traffic Law defines the role Vehicle'."^^xsd:string)AnnotationAssertion(rdfs:label <description.owl#defines> "defines"@en)AnnotationAssertion(rdfs:label <description.owl#Concept> "Concept"@en)AnnotationAssertion(rdfs:label <description.owl#isDefinedIn> "è definito in"@it)AnnotationAssertion(rdfs:isDefinedBy <description.owl#isConceptUsedIn> <description.owl>)AnnotationAssertion(rdfs:label <description.owl#Description> "Description"@en)AnnotationAssertion(rdfs:comment <description.owl#isConceptUsedIn> "A more generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description"^^xsd:string)AnnotationAssertion(rdfs:label <description.owl#isConceptUsedIn> "è un concetto usato in"@it)AnnotationAssertion(rdfs:label <description.owl#isConceptUsedIn> "is concept used in"@en)AnnotationAssertion(rdfs:comment <description.owl#Description> "A Description represents a conceptualization. It can be thought also as a 'descriptive context' that defines concepts in order to see a 'relational context' out of a set of data or observations. For example, a Plan is a description of some actions to be executed by agents in a certain way, with certain parameters; a Diagnosis is a description that provides an interpretation to a set of observed entities, etc.
A Description typically defines at least one Concept, for example the 'preparing a coffee' Description could define concepts such as 'Heater', 'AmountOfWater', 'CoffeeMix', etc.
With respect to other patterns, descriptions are 'abstractions' of situations (cf. the 'situation' pattern), and in some complex use cases (e.g. matching executions to plan models), the two patterns can be composed (see the descriptionsituation pattern)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <description.owl#usesConcept> <description.owl>)AnnotationAssertion(rdfs:isDefinedBy <description.owl#Description> <description.owl>)AnnotationAssertion(rdfs:isDefinedBy <description.owl#defines> <description.owl>)AnnotationAssertion(rdfs:comment <description.owl#Concept> "A concept can be an idea, notion, role, or even a reified class, and isDefinedIn a Description . 
Once defined, a Concept can be used in other descriptions. 
The classifies relation (see 'classification' pattern) relates concepts to entities at some time."^^xsd:string)
AnnotationAssertion(<cpannotationschema.owl#hasIntent> <cpannotationschema.owl#hasIntent> "To model hazardous situations and their associated hazardous events with events' participating objects and the hazards the objects are exposed to with the exposure value."^^xsd:string)AnnotationAssertion(owl:versionInfo <owl#versionInfo> "v0.1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy <region.owl#Region> <region.owl>)AnnotationAssertion(rdfs:label <region.owl#hasRegion> "has region"@en)AnnotationAssertion(rdfs:comment <region.owl#hasRegion> "A relation between entities and regions, e.g. 'the number of wheels of that truck is 12'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <region.owl#hasRegion> <region.owl>)AnnotationAssertion(rdfs:comment <region.owl#Region> "Any region in a dimensional space (a dimensional space is a maximal Region), which can be used as a value for a quality of an Entity . For example, TimeInterval, SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses of Region. 
Regions are not data values in the ordinary knowledge representation sense; in order to get patterns for modelling data, see the properties: representsDataValue and hasDataValue"^^xsd:string)AnnotationAssertion(rdfs:label <region.owl#hasRegion> "ha regione"@it)AnnotationAssertion(rdfs:isDefinedBy <region.owl#isRegionFor> <region.owl>)AnnotationAssertion(rdfs:label <region.owl#isRegionFor> "is region for"@en)AnnotationAssertion(rdfs:label <region.owl#isRegionFor> "è un ragione di"@it)AnnotationAssertion(rdfs:label <region.owl#hasRegionDataValue> "regione ha valore {it}"^^xsd:string)AnnotationAssertion(rdfs:label <region.owl#Region> "Regione"@it)AnnotationAssertion(rdfs:comment <region.owl#hasRegionDataValue> "A datatype property that encodes values for a Region, e.g. a float for the Region Height."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <region.owl#hasRegionDataValue> <region.owl>)AnnotationAssertion(rdfs:label <region.owl#Region> "Region"@en)AnnotationAssertion(rdfs:label <region.owl#hasRegionDataValue> "has region data value"@en)AnnotationAssertion(rdfs:comment <region.owl#isRegionFor> "A relation between entities and regions, e.g. 'the color of my car is red'."^^xsd:string)
AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#hasPart> "Indicates that a unit includes another unit."^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#Series> "Series"^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#Unit> "An entity that participates in the assembly of a born digital archive."^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#Fonds> "Fonds"^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#Fonds> "Sub-fonds:
A subdivision of a fonds containing a body of related records corresponding to administrative subdivisions in the originating agency or organization or, when that is not possible, to geographical, chronological, functional, or similar groupings of the material itself. When the creating body has a complex hierarchical structure, each sub-fonds has as many subordinate sub-fonds as are necessary to reflect the levels of the hierarchical structure of the primary subordinate administrative unit."^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#Item> "The smallest intellectually indivisible archival unit, e.g., a letter, memorandum, report, photograph, sound recording."^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#Fonds> "Fonds:
The whole of the records, regardless of form or medium, organically created and/or accumulated and used by a particular person, family, or corporate body in the course of that creator's activities and functions."^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#Unit> "Unit"^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#Creator> "Creator"^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#Item> "Item"^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#File> "File"^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#File> "An organized unit of documents grouped together either for current use by the creator or in the process of archival arrangement, because they relate to the same subject, activity, or transaction. A file is usually the basic unit within a record series."^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#hasPart> "has part"^^xsd:string)AnnotationAssertion(rdfs:label <BornDigitalArchives_ODP#hasCreator> "has creator"^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#Series> "Documents arranged in accordance with a filing system or maintained as a unit because they result from the same accumulation or filing process, or the same activity; have a particular form; or because of some other relationship arising out of their creation, receipt, or use. A series is also known as a records series."^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#Creator> "The creator of a born digital archive unit"^^xsd:string)AnnotationAssertion(rdfs:comment <BornDigitalArchives_ODP#hasCreator> "Indicates the creator of a unit."^^xsd:string)
AnnotationAssertion(rdfs:label <classification.owl#Concept> "Concetto"@it)AnnotationAssertion(rdfs:isDefinedBy <classification.owl#Concept> <classification.owl>)AnnotationAssertion(rdfs:isDefinedBy <classification.owl#isClassifiedBy> <classification.owl>)AnnotationAssertion(rdfs:label <classification.owl#Concept> "Concept"@en)AnnotationAssertion(rdfs:label <classification.owl#classifies> "classifica"@it)AnnotationAssertion(rdfs:label <classification.owl#classifies> "classifies"@en)AnnotationAssertion(rdfs:comment <classification.owl#classifies> "A relation between a Concept and an Entity, e.g. the Role 'student' classifies a Person 'John'."^^xsd:string)AnnotationAssertion(rdfs:label <classification.owl#isClassifiedBy> "is classified by"@en)AnnotationAssertion(rdfs:label <classification.owl#isClassifiedBy> "è classificato da"@it)AnnotationAssertion(rdfs:isDefinedBy <classification.owl#classifies> <classification.owl>)AnnotationAssertion(rdfs:comment <classification.owl#Concept> "A concept is a Social Object. 
The classifies relation relates concepts to entities at some time, but time can only be expressed in the alternative pattern: timeindexedclassification."^^xsd:string)AnnotationAssertion(rdfs:comment <classification.owl#isClassifiedBy> "A relation between a Concept and an Entity, e.g. 'John is considered a typical rude man'; your last concert constitutes the achievement of a lifetime; '20-year-old means she's mature enough'."^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy <componency.owl#Object> <componency.owl>)AnnotationAssertion(rdfs:comment <componency.owl#Object> "Any physical, social, or mental object, or a substance"^^xsd:string)AnnotationAssertion(rdfs:label <componency.owl#hasComponent> "has component"@en)AnnotationAssertion(rdfs:isDefinedBy <componency.owl#hasComponent> <componency.owl>)AnnotationAssertion(rdfs:label <componency.owl#isComponentOf> "is component of"@en)AnnotationAssertion(rdfs:isDefinedBy <componency.owl#isComponentOf> <componency.owl>)AnnotationAssertion(rdfs:comment <componency.owl#hasComponent> "The hasPart relation without transitivity, holding between an entity (the system) and another (the component), and assuming a design that structures the system. For an explicit pattern encoding design, see the 'designobject' pattern.
The componency pattern uses the transitive reduction logical pattern to preserve transitive on the superproperty from the partof pattern. In practice, the partof pattern acts here as the transitive reduction of the componency pattern."^^xsd:string)AnnotationAssertion(rdfs:label <componency.owl#Object> "Object"@en)AnnotationAssertion(rdfs:comment <componency.owl#isComponentOf> "The hasPart relation without transitivity, holding between an entity (the system) and another (the component), and assuming a design that structures the system. For an explicit pattern encoding design, see the 'designobject' pattern.
The componency pattern uses the transitive reduction logical pattern to preserve transitive on the superproperty from the partof pattern. In practice, the partof pattern acts here as the transitive reduction of the componency pattern."^^xsd:string)
AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#isCompatibleWith> "Represents the relationship of compatibility between two components."^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#requiresHardware> "requires hardware"^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#usesDriver> "uses driver"^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#OperatingSystem> "Operating System"^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#requiresHardware> "Indicates that an entity requires a certain piece of hardware to operate."^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#Software> "Software"^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#Computer> "This entity represents computers of any type, size, cost and application."^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#requiresSoftware> "requires software"^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#Driver> "Driver"^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#Computer> "Computer"^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#usesHardware> "Indicates the usage of a specific piece of hardware."^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#Hardware> "Hardware"^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#isCompatibleWith> "is compatible with"^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#usesSoftware> "uses software"^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#usesDriver> "Indicates the usage of a specific driver."^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#requiresSoftware> "Indicates that an entity requires a certain piece of software to operate."^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#usesSoftware> "Indicates the usage of a specific piece of software."^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#usesOperatingSystem> "Indicates the usage of a certain Operating System."^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#usesHardware> "uses hardware"^^xsd:string)AnnotationAssertion(rdfs:comment <ComputerSystem_ODP#Hardware> "A physical component or a collection of physical components used by (or within or aside) a computer."^^xsd:string)AnnotationAssertion(rdfs:label <ComputerSystem_ODP#usesOperatingSystem> "uses Operating System"^^xsd:string)
AnnotationAssertion(rdfs:label <constituency.owl#hasConstituent> "has constituent"@en)AnnotationAssertion(rdfs:label <constituency.owl#hasConstituent> "ha costituente"@it)AnnotationAssertion(rdfs:comment <constituency.owl#isConstituentOf> "'Constituency' depends on some layering of  the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are  typical layerings. 
Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense.
A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts.
Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. 
In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."^^xsd:string)AnnotationAssertion(rdfs:label <constituency.owl#isConstituentOf> "is constituent of"@en)AnnotationAssertion(rdfs:label <constituency.owl#isConstituentOf> "è costituente di"@it)AnnotationAssertion(rdfs:isDefinedBy <constituency.owl#hasConstituent> <constituency.owl>)AnnotationAssertion(rdfs:isDefinedBy <constituency.owl#isConstituentOf> <constituency.owl>)AnnotationAssertion(rdfs:comment <constituency.owl#hasConstituent> "'Constituency' depends on some layering of  the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are  typical layerings. 
Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense.
A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts.
Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. 
In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."^^xsd:string)
AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#processedBy> "Associates a stream with a codec."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SubtitleTextFormat> "The file format of subtitles."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SetOfStandards> "E.g. BT.601 or BT.709"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasVideoQualityMeasurement> "Associates a video stream with a video quality measurement."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasRangeType> "Associates a video stream with a range type."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasSampleRate> "has sample rate"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasChromaFormat> "has chroma format"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#Container> "Container"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoStream> "A video stream is a stream where the carried data is video content."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#RangeType> "The type of range a video is created for."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#processedBy> "processed by"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#AudioCodec> "Audio Codec"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasSampleRate> "Associates a video stream or audio stream with a sample rate."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AspectRatio> "E.g. 16:9, 4:3, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#Stream> "Stream"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasSubtitleStream> "Associates a digital video with an subtitle stream."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasBitRate> "has bitrate"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasColourSpaceType> "has colour space type"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#Codec> "A codec is a device or computer program capable of encoding or decoding a digital data stream or signal."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#YUVSampleRange> "E.g. 16-235"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasScanType> "has scan type"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#EmbeddingType> "E.g. hard, prerendered, soft, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasEmbeddingType> "Associates a subtitle stream with an embedding type."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoCodecLevel> "E.g. 4"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasAspectRatio> "Associates a video stream with an aspect ratio."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#SubtitleTextFormat> "Subtitle Text Format"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasScanType> "Associates a video stream with a scan type."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#PlaybackDuration> "The duration of a video, video stream or audio stream."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#BitRate> "The bitrate is the data rate for a video or audio file. Video and audio data rates are given in bits per second."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#VideoStream> "Video Stream"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasPlaybackDuration> "Associates a digital video, a video stream or an audio stream with a playback duration."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasRangeType> "has range type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasFrameSize> "has frame size"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasAudioStream> "Associates a digital video with an audio stream."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoCodec> "A video codec is an electronic circuit or software that compresses or decompresses digital video, thus converting raw (uncompressed) digital video to a compressed format or vice-versa."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#ColourSpaceType> "A color space is a specific organization of colors. It allows for reproducible representations of color, in both analog and digital representations. A color space may be arbitrary, with particular colors assigned to a set of physical color swatches and corresponding assigned names or numbers."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasVideoQualityMetric> "Associates a video stream with a video quality metric."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SetOfStandards> "Sets of standards standardize the format of a video stream."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#EmbeddingType> "Embedding Type"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AnalogBroadcastStandard> "The video color encoding system, if the video originates from analog television broadcasts."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasVideoCodecLevel> "Associates a video codec with a video codec level."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasYUVSampleRange> "has YUV sample range"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasChromaFormat> "Associates a video stream with a chroma format."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#Descriptor> "Descriptors are the various elements describing a digital video, a container, a stream or a codec."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AspectRatio> "The aspect ratio of an image describes the proportional relationship between its width and its height. It is commonly expressed as two numbers separated by a colon, as in 16:9."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasSubtitleTextFormat> "Associates a subtitle stream with a subtitle text format."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#ChromaFormat> "The chroma subsampling type. Chroma subsampling is the practice of encoding images by implementing less resolution for chroma information than for luma information, taking advantage of the human visual system's lower acuity for color differences than for luminance."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasCodingStandard> "has coding standard"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoQualityMetric> "E.g. VQM"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoCodecLevel> "A video codec level is a specified set of constraints that indicate a degree of required decoder performance for a profile."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasAspectRatio> "has aspect ratio"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasStream> "has stream"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#DigitalVideo> "Digital Video"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasVideoCodecProfile> "Associates a video codec with a video codec profile."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoCodec> "E.g. QuickTime H.264 (Apple's implementation for H.264/MPEG-4 AVC coding format)"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasVideoStream> "Associates a digital video with a video stream."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasCodingStandard> "Associates a video or audio stream with a coding standard."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasSetOfStandards> "Associates a video stream with a set of standards."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#AudioStream> "Audio Stream"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasStream> "Associates a digital video with a stream."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#SubtitleStream> "Subtitle Stream"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#YUVSampleRange> "YUV Sample Range"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasSubtitleTextFormat> "has subtitle text format"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#SetOfStandards> "Set Of Standards"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#Stream> "A (data) stream is a sequence of digitally encoded coherent signals (packets of data or data packets) used to transmit or receive information that is in the process of being transmitted. The term stream is used here to define raw, uncompressed content (video or audio) prior to being encoded into a wrapper or after being decoded from a wrapper."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasPlaybackDuration> "has playback duration"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#CompressionType> "E.g. lossy, lossless or uncompressed"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#ScanType> "Progressive or interlaced scan."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#AnalogBroadcastStandard> "Analog Broadcast Standard"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#SampleRate> "Sample Rate"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#ChromaFormat> "E.g. 4:2:0"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AudioStream> "An audio stream is a stream where the carried data is audio content."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasYUVSampleRange> "Associates a video stream with a YUV sample range."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#VideoQualityMeasurement> "Video Quality Measurement"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#Codec> "Codec"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#FrameRate> "E.g. 60 FPS"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#CodingStandard> "Also known as coding format or compression format."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#DigitalVideo> "A digital video file."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AnalogBroadcastStandard> "E.g. NTSC, PAL, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasAnalogBroadcastStandard> "has analog broadcast standard"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasEmbeddingType> "has embedding type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#RangeType> "Range Type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasCompressionType> "has compression type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#VideoCodecProfile> "Video Codec Profile"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasCompressionType> "Associates a video or audio codec with a compression type."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasVideoCodecLevel> "has video codec level"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoCodecProfile> "E.g. baseline profile, extended profile, main profile, high profile, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#PlaybackDuration> "Playback Duration"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#CompressionType> "The type of video compression."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasVideoQualityMeasurement> "has video quality measurement"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#FrameSize> "The dimensions of a video's frame."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasVideoStream> "has video stream"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#CompressionType> "Compression Type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasSetOfStandards> "has set of standards"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#FrameSize> "E.g. 1920 x 1080"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoQualityMeasurement> "Measurement carried out according to the video quality metric."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#RangeType> "E.g. broadcast range or full range"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoCodecProfile> "The video codec profile is a set of capabilities and constraints apllied in the encoder. It allows the decoder  to recognize the requirements to decode a specific stream."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasAnalogBroadcastStandard> "Associates a digital video with an analog broadcast standard."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#FrameSize> "Frame Size"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SubtitleTextFormat> "E.g. SubRip, SubViewer, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasBitRate> "Associates an audio or video stream with a bit rate."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SampleRate> "The video sample rate of a digital video format determines how often the light intensity of each video line is sampled."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasAudioStream> "has audio stream"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasVideoQualityMetric> "has video quality metric"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#FrameRate> "Frame rate, also known as frame frequency, is the frequency (rate) at which an imaging device produces unique consecutive images called frames. The term applies equally well to film and video cameras, computer graphics, and motion capture systems. Frame rate is most often expressed in frames per second (FPS) and is also expressed in progressive scan monitors as hertz (Hz)."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AudioCodec> "An audio codec is a device or computer program capable of coding or decoding a digital data stream of audio."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#EmbeddingType> "The type of embedment used to attach a subtitle stream to a video."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#Container> "A container or wrapper format is a metafile format whose specification describes how different elements of data and metadata coexist in a computer file."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#BitRate> "E.g. 2 MBits/s"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasVideoCodecProfile> "has video codec profile"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#PlaybackDuration> "E.g. 22 minutes"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SampleRate> "The audio sample rate is the number of samples of audio carried per second, measured in Hz or kHz (one kHz being 1 000 Hz). For example, 44 100 samples per second can be expressed as either 44 100 Hz, or 44.1 kHz."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#ColourSpaceType> "Colour Space Type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#ChromaFormat> "Chroma Format"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#VideoCodecLevel> "Video Codec Level"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasSubtitleStream> "has subtitle stream"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#CodingStandard> "E.g. H.264/MPEG-4 AVC"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#VideoQualityMetric> "Video Quality Metric"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#AspectRatio> "Aspect Ratio"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#ColourSpaceType> "E.g. YUV, RGB, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SubtitleStream> "A subtitle stream is a stream where the carried data is subtitle content for a video."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasFrameRate> "Associates a video stream with a frame rate."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#ScanType> "Scan Type"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#wrappedBy> "wrapped by"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#hasFrameRate> "has frame rate"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SampleRate> "E.g. 74.25 MHz"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#VideoCodec> "Video Codec"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#wrappedBy> "Associates a digital video file with a container type."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasFrameSize> "Associates a video stream with a frame size."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#Descriptor> "Descriptor"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#VideoQualityMetric> "Process or software used to measure the quality of a video."^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#hasColourSpaceType> "Associates a video stream with a colour space type."^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#FrameRate> "Frame Rate"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#BitRate> "Bit Rate"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#AudioCodec> "E.g. MP3"^^xsd:string)AnnotationAssertion(rdfs:label <DigitalVideo_ODP#CodingStandard> "Coding Standard"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#SampleRate> "E.g. 96 kHz"^^xsd:string)AnnotationAssertion(rdfs:comment <DigitalVideo_ODP#Container> "E.g. Matroska (MKV), MP4, etc."^^xsd:string)
AnnotationAssertion(rdfs:label <event#freshProp1> "freshProp1"^^xsd:string)AnnotationAssertion(rdfs:comment <event#subSpatioTemporalExtentOf> "Property indicating partonomic relation between two spatiotemporal extents. The Event pattern only assumes that this is given by the spatiotemporal extent pattern actually used. Thus, domain and range are not explicitly stated and this property is included in axioms resulted by OWL translation of the following rule: :Event(?x) ^ :hasSpatioTemporalExtent(?x,?w) ^ :subEventOf(?x,?y) ^ :Event(?y) ^ :hasSpatioTemporalExtent(?y,?z) -> :subSpatioTemporalExtentOf(?w,?z)"^^xsd:string)AnnotationAssertion(rdfs:label <event#hasSpatioTemporalExtent> "hasSpatioTemporalExtent"^^xsd:string)AnnotationAssertion(rdfs:comment <event#DASE_RULE> "Attached to an axiom, this annotation property provides information on the original (SWRL) rule from which the axiom was obtained through translation."^^xsd:string)AnnotationAssertion(rdfs:label <event#ParticipantRole> "ParticipantRole"^^xsd:string)AnnotationAssertion(rdfs:comment <event#SpatioTemporalExtent> "Hook to a complex notion representing a unified spatial and temporal extent. Intended to cover non-static or discontinuous spatiotemporal extent. Should be aligned to a separate Spatiotemporal Extent pattern."^^xsd:string)AnnotationAssertion(rdfs:comment <event#providesParticipantRole> "Property relating Event to ParticipantRole in this pattern. The range is always ParticipantRole since it makes no sense to have a property named as providesParticipantRole not to point to a participant role. The domain is not set to Event as non-Event may also provide a participant role."^^xsd:string)AnnotationAssertion(rdfs:comment <event#subEventOf> "Property expressing partonomic relation between two events. Domain and range are always Event."^^xsd:string)AnnotationAssertion(rdfs:comment <event#freshProp1> "This property is artificially generated in order to express the following rule in OWL:  :Event(?x) ^ :providesParticipantRole(?x,?p) ^ :subEventOf(?x,?y) -> :providesParticipantRole(?y,?p). 
The rule is translated into two axioms: 
1. :Event SubClassOf: :freshProp1 some Self 
2.  inverse (:subEventOf) o :freshProp1 o :providesParticipantRole SubPropertyOf: : :providesParticipantRole"^^xsd:string)AnnotationAssertion(rdfs:comment <event#hasInformationObject> "Property relating Event to InformationObject in this pattern. The domain of this property is not restricted to Event  since it is possible that non-event to have an information object. The range is always InformationObject since it makes no sense to have a property named hasInformationObject to point to anything other than information object."^^xsd:string)AnnotationAssertion(rdfs:label <event#SpatioTemporalExtent> "SpatioTemporalExtent"^^xsd:string)AnnotationAssertion(rdfs:label <event#providesParticipantRole> "providesParticipantRole"^^xsd:string)AnnotationAssertion(rdfs:label <event#Event> "Event"^^xsd:string)AnnotationAssertion(rdfs:comment <event#freshProp2> "This property is artificially generated in order to express the following rule in OWL:  :Event(?x) ^ :hasSpatioTemporalExtent(?x,?w) ^ :subEventOf(?x,?y) ^ :Event(?y) ^ :hasSpatioTemporalExtent(?y,?z) -> :subSpatioTemporalExtentOf(?w,?z).
The rule is translated into two axioms: 
1. :Event SubClassOf: :freshProp2 some Self 
2. inverse (:hasSpatioTemporalExtent) o :freshProp2 o :subEventOf o :freshProp2 o :hasSpatioTemporalExtent SubPropertyOf: :subSpatioTemporalExtentOf"^^xsd:string)AnnotationAssertion(rdfs:label <event#InformationObject> "InformationObject"^^xsd:string)AnnotationAssertion(rdfs:label <event#subEventOf> "subEventOf"^^xsd:string)AnnotationAssertion(rdfs:comment <event#ParticipantRole> "Every ParticipantRole represents a reified relationship between an event and one of its participants. Should normally be aligend to a separate Participant-Role pattern."^^xsd:string)AnnotationAssertion(rdfs:label <event#hasInformationObject> "hasInformationObject"^^xsd:string)AnnotationAssertion(rdfs:comment <event#Event> "Represents any kind of events. An event possesses a spatiotemporal extent, provides at least one participant-role, which is performed by some entity (agents or otherwise), and may be a sub-event of another event. An event may also have additional descriptive information, which is consolidated through an information object."^^xsd:string)AnnotationAssertion(rdfs:label <rdf-schema#label> "Core Pattern for Event"^^xsd:string)AnnotationAssertion(rdfs:label <event#freshProp2> "freshProp2"^^xsd:string)AnnotationAssertion(rdfs:label <event#subSpatioTemporalExtentOf> "subSpatioTemporalExtentOf"^^xsd:string)AnnotationAssertion(rdfs:comment <event#InformationObject> "An entity that encapsulates all descriptive or non-defining information of the corresponding event, e.g., names, additional identifiers, textual descriptions, etc. Should normally be aligned to a separate Information Object pattern."^^xsd:string)AnnotationAssertion(rdfs:comment <event#hasSpatioTemporalExtent> "Property relating Event to SpatioTemporalExtent in this pattern. The range is always SpatioTemporalExtent (globally) since it makes no sense to have a property named hasSpatioTemporalExtent to point to anything other than spatiotemporal extent. Tthe domain is not set to Event as non-Event may also have spatiotemporal extent."^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy <gotop.owl#partOf> <gotop.owl>)AnnotationAssertion(rdfs:comment <gotop.owl#MolecularFunction> "Note that, in addition to forming the root of the molecular function ontology, this term is recommended for use for the annotation of gene products whose molecular function is unknown. Note that when this term is used for annotation, it indicates that no information was available about the molecular function of the gene product annotated as of the date the annotation was made; the evidence code ND, no data, is used to indicate this."^^xsd:string)AnnotationAssertion(rdfs:label <gotop.owl#BiologicalProcess> "biological process"@en)AnnotationAssertion(rdfs:isDefinedBy <gotop.owl#BiologicalProcess> <gotop.owl>)AnnotationAssertion(rdfs:comment <gotop.owl#MolecularFunction> "Elemental activities, such as catalysis or binding, describing the actions of a gene product at the molecular level. A given gene product may exhibit one or more molecular functions."^^xsd:string)AnnotationAssertion(rdfs:label <gotop.owl#CellularComponent> "cellular component"@en)AnnotationAssertion(rdfs:isDefinedBy <gotop.owl#All> <gotop.owl>)AnnotationAssertion(rdfs:comment <gotop.owl#BiologicalProcess> "Note that, in addition to forming the root of the biological process ontology, this term is recommended for use for the annotation of gene products whose biological process is unknown. Note that when this term is used for annotation, it indicates that no information was available about the biological process of the gene product annotated as of the date the annotation was made; the evidence code ND, no data, is used to indicate this."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <gotop.owl#CellularComponent> <gotop.owl>)AnnotationAssertion(rdfs:isDefinedBy <gotop.owl#MolecularFunction> <gotop.owl>)AnnotationAssertion(rdfs:comment <gotop.owl#All> "This term is the most general term possible"^^xsd:string)AnnotationAssertion(<cpannotationschema.owl#isCloneOf> <gotop.owl#CellularComponent> "GO#GO_0005575"^^xsd:string)AnnotationAssertion(<cpannotationschema.owl#isCloneOf> <gotop.owl#MolecularFunction> "GO#GO_0003674"^^xsd:string)AnnotationAssertion(<cpannotationschema.owl#isCloneOf> <gotop.owl#BiologicalProcess> "GO#GO_0008150"^^xsd:string)AnnotationAssertion(rdfs:comment <gotop.owl#BiologicalProcess> "Those processes specifically pertinent to the functioning of integrated living units: cells, tissues, organs, and organisms. A process is a collection of molecular events with a defined beginning and end."^^xsd:string)AnnotationAssertion(<cpannotationschema.owl#isCloneOf> <gotop.owl#partOf> "obo#part_of"^^xsd:string)AnnotationAssertion(rdfs:comment <gotop.owl#CellularComponent> "Note that, in addition to forming the root of the cellular component ontology, this term is recommended for use for the annotation of gene products whose cellular component is unknown. Note that when this term is used for annotation, it indicates that no information was available about the cellular component of the gene product annotated as of the date the annotation was made; the evidence code ND, no data, is used to indicate this."^^xsd:string)AnnotationAssertion(rdfs:label <gotop.owl#partOf> "part of"@en)AnnotationAssertion(rdfs:comment <gotop.owl#CellularComponent> "The part of a cell or its extracellular environment in which a gene product is located. A gene product may be located in one or more parts of a cell and its location may be as specific as a particular macromolecular complex, that is, a stable, persistent association of macromolecules that function together."^^xsd:string)AnnotationAssertion(rdfs:label <gotop.owl#MolecularFunction> "molecular function"@en)

AnnotationAssertion(rdfs:label <informationrealization.owl#isRealizedBy> "is realized by"@en)AnnotationAssertion(rdfs:label <informationrealization.owl#InformationRealization> "Information realization"@en)AnnotationAssertion(rdfs:isDefinedBy <informationrealization.owl#InformationObject> <informationrealization.owl>)AnnotationAssertion(rdfs:label <informationrealization.owl#realizes> "realizes"@en)AnnotationAssertion(rdfs:comment <informationrealization.owl#InformationRealization> "A concrete realization of an information object, e.g. the written document containing the text of a law."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <informationrealization.owl#isRealizedBy> <informationrealization.owl>)AnnotationAssertion(rdfs:comment <informationrealization.owl#InformationObject> "A piece of information, such as a musical composition, a text, a word, a picture, independently from how it is concretely realized."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <informationrealization.owl#InformationRealization> <informationrealization.owl>)AnnotationAssertion(rdfs:isDefinedBy <informationrealization.owl#realizes> <informationrealization.owl>)AnnotationAssertion(rdfs:comment <informationrealization.owl#realizes> "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."^^xsd:string)AnnotationAssertion(rdfs:label <informationrealization.owl#InformationObject> "Information object"@en)AnnotationAssertion(rdfs:comment <informationrealization.owl#isRealizedBy> "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."^^xsd:string)
AnnotationAssertion(rdfs:label <intensionextension.owl#isAbout> "is about"@en)AnnotationAssertion(rdfs:isDefinedBy <intensionextension.owl#isAbout> <intensionextension.owl>)AnnotationAssertion(rdfs:label <intensionextension.owl#SocialObject> "Oggetto sociale"@it)AnnotationAssertion(rdfs:label <intensionextension.owl#InformationObject> "Information object"@en)AnnotationAssertion(rdfs:label <intensionextension.owl#expresses> "expresses"@en)AnnotationAssertion(rdfs:comment <intensionextension.owl#isExpressedBy> "The relation between an InformationObject and a 'meaning'.
What is a meaning is dependent on the background approach/theory that one assumes. For example, lexicographers that write dictionaries, glossaries, etc. assume that the meaning of term is a paraphrase (or 'gloss', or 'definition'). Another approach is provided by concept schemes like thesauri and lexicons, which assume that the meaning of a term is a 'concept', possibly encoded as a 'lemma', 'synset', or 'descriptor'. Still another approach is that of psychologists and cognitive scientists, which often assume that the meaning of an information object is a concept encoded in the mind or cognitive system of an agent. A radically different approach is taken by social scientists and semioticians, who usually assume that meaning of an information object is spread across the members of a community that use that object. The logical approach to meaning is completely different, since it assumes that the meaning of e.g. a term is equivalent to the set of individuals that the term can be applied to; for example, the meaning of 'Ali' is e.g. an individual person called Ali, the meaning of 'Airplane' is e.g. the set of airplanes, etc. Finally, an approach taken by structuralist linguistics and frame semantics is that a meaning is the relational context in which an information object can be applied; for example, a meaning of 'Airplane' is situated e.g. in the context ('frame') of passenger airline flights.

These different approaches are not necessarily conflicting, and they mostly talk about different aspects of so-called 'semantics'. They can be summarized, and modelled withih DOLCE-Ultralite, as follows:
(1) Intensional meaning
	- Relational meaning (as for frame semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Description
	- Conceptual meaning (as for psychological and 'concept scheme' semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Concept
	- Paraphrase meaning (as for lexicographic semantics). Here it is modelled as the expresses relation between instances of InformationObject and different instances of InformationObject that act as 'paraphrases'
	- Cultural meaning (as for social science semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of SocialObject

(2) Extensional meaning (as for logic and formal semantics)
	- Object-level formal meaning (as in the traditional first-order logic semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Collection
	- Modal formal meaning (as in possible-world semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Collections as located in another Collection that isFormallyRepresentedIn a PossibleWorld

For example:
- the term Beehive expresses the Concept Beehive
- the term Beehive expresses the Description BeingABeehive, a relation that defines concepts such as Bee, Honey, Habitation, etc.
- the text of Italian Constitution expresses the 'content' of the Constitution
- your email expresses an aggressive attitude"^^xsd:string)AnnotationAssertion(rdfs:label <intensionextension.owl#expresses> "esprime"@it)AnnotationAssertion(rdfs:comment <intensionextension.owl#isAbout> "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented bu reusing the pattern CollectionEntity."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <intensionextension.owl#SocialObject> <intensionextension.owl>)AnnotationAssertion(rdfs:isDefinedBy <intensionextension.owl#isReferenceOf> <intensionextension.owl>)AnnotationAssertion(rdfs:isDefinedBy <intensionextension.owl#expresses> <intensionextension.owl>)AnnotationAssertion(rdfs:label <intensionextension.owl#isAbout> "si riferisce a"@it)AnnotationAssertion(rdfs:label <intensionextension.owl#SocialObject> "Social object"@en)AnnotationAssertion(rdfs:isDefinedBy <intensionextension.owl#isExpressedBy> <intensionextension.owl>)AnnotationAssertion(rdfs:comment <intensionextension.owl#expresses> "The relation between an InformationObject and a 'meaning'.
What is a meaning is dependent on the background approach/theory that one assumes. For example, lexicographers that write dictionaries, glossaries, etc. assume that the meaning of term is a paraphrase (or 'gloss', or 'definition'). Another approach is provided by concept schemes like thesauri and lexicons, which assume that the meaning of a term is a 'concept', possibly encoded as a 'lemma', 'synset', or 'descriptor'. Still another approach is that of psychologists and cognitive scientists, which often assume that the meaning of an information object is a concept encoded in the mind or cognitive system of an agent. A radically different approach is taken by social scientists and semioticians, who usually assume that meaning of an information object is spread across the members of a community that use that object. The logical approach to meaning is completely different, since it assumes that the meaning of e.g. a term is equivalent to the set of individuals that the term can be applied to; for example, the meaning of 'Ali' is e.g. an individual person called Ali, the meaning of 'Airplane' is e.g. the set of airplanes, etc. Finally, an approach taken by structuralist linguistics and frame semantics is that a meaning is the relational context in which an information object can be applied; for example, a meaning of 'Airplane' is situated e.g. in the context ('frame') of passenger airline flights.

These different approaches are not necessarily conflicting, and they mostly talk about different aspects of so-called 'semantics'. They can be summarized, and modelled withih DOLCE-Ultralite, as follows:
(1) Intensional meaning
	- Relational meaning (as for frame semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Description
	- Conceptual meaning (as for psychological and 'concept scheme' semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Concept
	- Paraphrase meaning (as for lexicographic semantics). Here it is modelled as the expresses relation between instances of InformationObject and different instances of InformationObject that act as 'paraphrases'
	- Cultural meaning (as for social science semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of SocialObject

(2) Extensional meaning (as for logic and formal semantics)
	- Object-level formal meaning (as in the traditional first-order logic semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Collection
	- Modal formal meaning (as in possible-world semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Collections as located in another Collection that isFormallyRepresentedIn a PossibleWorld

For example:
- the term Beehive expresses the Concept Beehive
- the term Beehive expresses the Description BeingABeehive, a relation that defines concepts such as Bee, Honey, Habitation, etc.
- the text of Italian Constitution expresses the 'content' of the Constitution
- your email expresses an aggressive attitude"^^xsd:string)AnnotationAssertion(rdfs:label <intensionextension.owl#isReferenceOf> "è il riferimento di"@it)AnnotationAssertion(rdfs:label <intensionextension.owl#isExpressedBy> "is expressed by"@en)AnnotationAssertion(rdfs:label <intensionextension.owl#InformationObject> "Oggetto informativo"@it)AnnotationAssertion(rdfs:label <intensionextension.owl#isExpressedBy> "è espresso da"@it)AnnotationAssertion(rdfs:isDefinedBy <intensionextension.owl#InformationObject> <intensionextension.owl>)AnnotationAssertion(rdfs:comment <intensionextension.owl#isReferenceOf> "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection ."^^xsd:string)AnnotationAssertion(rdfs:comment <intensionextension.owl#InformationObject> "A piece of information, such as a musical composition, a text, a word, a picture, independently from how it is concretely realized."^^xsd:string)AnnotationAssertion(rdfs:comment <intensionextension.owl#SocialObject> "Any Object that exists within some communication Event, in which at least one PhysicalObject participates in. 
In other words, all objects that have been created in the process of social communication: for the sake of communication (InformationObject), for incorporating new individuals (SocialAgent, Place), for contextualizing existing entities (Situation), for collecting existing entities (Collection), or for describing existing entities (Description, Concept)."^^xsd:string)AnnotationAssertion(rdfs:label <intensionextension.owl#isReferenceOf> "is reference of"@en)
AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#grounding> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#LineItemCountQuantity> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#TaxTotal> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#subText> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#buyerTransaction> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#TaxCurrencyType> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#lineItem> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#Grounding> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#legalTotals> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#ReferencedOrder> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#context> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#TransactionAmount> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#IssueDate> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#sellerTransaction> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#taxTotal> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#TaxPointDate> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#CurrencyMeasure> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#InvoiceCurrencyCode> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#LineItem> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#PricingCurrencyType> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#Order> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#Buying> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#Invoice> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#InvoiceCurrencyType> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#Selling> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#LegalTotals> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#Context> <invoice.owl>)AnnotationAssertion(rdfs:isDefinedBy <invoice.owl#ID> <invoice.owl>)

AnnotationAssertion(rdfs:label <list.owl#lastItemOf> "last item of"^^xsd:string)AnnotationAssertion(rdfs:comment <list.owl#ListItem> "ListItem - Element belonging to a list"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#hasFirstItem> "has first item"^^xsd:string)AnnotationAssertion(rdfs:comment <list.owl#previousItem> "previous item - The link to the previous item in a list (ordered collection)"^^xsd:string)AnnotationAssertion(rdfs:comment <list.owl#List> "List - An ordered array of items, that can be present in multiple copies"^^xsd:string)AnnotationAssertion(rdfs:comment <list.owl#hasLastItem> "last item - The link to the last item of the list"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#firstItemOf> "first item of"^^xsd:string)AnnotationAssertion(rdfs:comment <list.owl#nextItem> "next item - The link to the next item in a list (ordered collection)"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#ListItem> "list item"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#List> "list"^^xsd:string)AnnotationAssertion(rdfs:comment <list.owl#hasFirstItem> "first item - The link to the first item of the list"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#nextItem> "next item"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#hasLastItem> "has last item"^^xsd:string)AnnotationAssertion(rdfs:label <list.owl#previousItem> "previous item"^^xsd:string)
AnnotationAssertion(rdfs:label <naryparticipation.owl#isIncludedInParticipation> "is included in participation"@en)AnnotationAssertion(rdfs:label <naryparticipation.owl#participationIncludes> "participation includes"@en)AnnotationAssertion(rdfs:label <naryparticipation.owl#NaryParticipation> "Nary participation"@en)
AnnotationAssertion(rdfs:comment <newsreportingevent.owl#owns> "This property can be used to link a certain NewsProvider with a Media that the NewsProvider ows, e.g. Fox News Channel is owned by Fox Entertainment Group, which also owns other Media (FXX Channel, etc.).
This is an universal property, it can be also used in different context (e.g. Ruslana owns a Persian cat)."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#PresentationContext> "Class for denoting circumstances of an entity presentation. If a waiter presented a dish with an apologetic smile, then the apologetic smile is a PresentationContext."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#presentedAt> "This property can be used to link a NewsReportingEvent to a Media (TV station, radio station, newspaper, webpage) at which a certain ActualEventView was presented. 
This is an universal property and can be used in different contexts."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#NewsReportingEvent> "This is a subclass of ReportingEvent, designed to represent an act of reporting a certain actual event during a news programme or via other news media."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#NewsPresentationContext> "Class for denoting circumstances of an actual event presentation. For example if an event was presented at the end of website, then end of website is its NewsPresentationContext.
NewsPresentationContext is not directly attached to an ActualEventView, it is attached to NewsReportingEvent, which designates the act of an event reporting."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#NewsProvider> "An entity, usually a company, that ows a certain Media. For example Fox Entertainment Group owns the Fox News Channel. Fox Entertainment Group is a NewsProvider."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#Media> "An entity that allows a communication of news messages, for example a TV station, radio station, newspaper, website, etc."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#NewsEventReporter> "An Actor (usually a Person) that is an author of a certain ActualEventView.
NewsEventReporter is not linked to an ActualEventView directly, it is connected to NewsReportingEvent, which is designed to document the act of reporting."@en)AnnotationAssertion(rdfs:comment <newsreportingevent.owl#hasPresentationContext> "This property can be used to link NewsReportingEvent to a NewsPresentationContext."@en)
AnnotationAssertion(rdfs:comment <objectrole.owl#Role> "A Concept that classifies an Object"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <objectrole.owl#Role> <objectrole.owl>)AnnotationAssertion(rdfs:label <objectrole.owl#hasRole> "has role"@en)AnnotationAssertion(rdfs:label <objectrole.owl#Object> "Object"@en)AnnotationAssertion(rdfs:comment <objectrole.owl#Object> "Any physical, social, or mental object, or a substance"^^xsd:string)AnnotationAssertion(rdfs:label <objectrole.owl#hasRole> "ha ruolo"@it)AnnotationAssertion(rdfs:comment <objectrole.owl#isRoleOf> "A relation between an object and a role, e.g. the 'student' is the role of 'John'."^^xsd:string)AnnotationAssertion(rdfs:label <objectrole.owl#Role> "Ruolo"@it)AnnotationAssertion(rdfs:isDefinedBy <objectrole.owl#isRoleOf> <objectrole.owl>)AnnotationAssertion(rdfs:comment <objectrole.owl#hasRole> "A relation between an object and a role, e.g. the person 'John' has role 'student'."^^xsd:string)AnnotationAssertion(rdfs:label <objectrole.owl#Role> "Role"@en)AnnotationAssertion(rdfs:isDefinedBy <objectrole.owl#Object> <objectrole.owl>)AnnotationAssertion(rdfs:label <objectrole.owl#Object> "Oggetto"@it)AnnotationAssertion(rdfs:isDefinedBy <objectrole.owl#hasRole> <objectrole.owl>)AnnotationAssertion(rdfs:label <objectrole.owl#isRoleOf> "è un ruolo di"@it)AnnotationAssertion(rdfs:label <objectrole.owl#isRoleOf> "is role of"@en)
AnnotationAssertion(rdfs:isDefinedBy <place.owl#Place> <place.owl>)AnnotationAssertion(rdfs:label <place.owl#isLocationOf> "is location of"@en)AnnotationAssertion(rdfs:label <place.owl#hasLocation> "has location"@en)AnnotationAssertion(rdfs:isDefinedBy <place.owl#hasLocation> <place.owl>)AnnotationAssertion(rdfs:isDefinedBy <place.owl#isLocationOf> <place.owl>)AnnotationAssertion(rdfs:label <place.owl#Place> "Place"@en)AnnotationAssertion(rdfs:comment <place.owl#isLocationOf> "A generic, relative localization, holding between any entities. E.g. 'Rome is the seat of the Pope', 'the liver is the location of the tumor'.
As a very general notion of localization, it is assumed as transitive.
For 'absolute' locations, see SpaceRegion"^^xsd:string)AnnotationAssertion(rdfs:label <place.owl#hasLocation> "ha localizzazione"@it)AnnotationAssertion(rdfs:comment <place.owl#Place> "A location, in a very generic sense: a political geographic entity (Roma, Lesotho), a location determined by the presence of other entities ('the area close to Roma'), pivot events or signs (\"the area where the helicopter fell\"), complements of other entities ('the area under the table'), as well as physical objects conceptualized as locations as their main identity criterion ('the territory of Italy').
In this generic sense, a Place is an 'approximate', relative location. For an 'absolute', abstract location, cf. the pattern spaceregion.owl.
Formally, a Place is defined by the fact of having something located in it; a Place is located in itself."^^xsd:string)AnnotationAssertion(rdfs:label <place.owl#isLocationOf> "è una localizzazione di"@it)AnnotationAssertion(rdfs:label <place.owl#Place> "Luogo"@it)AnnotationAssertion(rdfs:comment <place.owl#hasLocation> "A generic, relative localization, holding between any entities. E.g. 'the cat is on the mat', 'Omar is in Samarcanda', 'the wound is close to the femural artery'.
For 'absolute' locations, see SpaceRegion"^^xsd:string)
AnnotationAssertion(rdfs:label <Policy_ODP#AutomationStatus> "Automation Status"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasImplementationStatus> "has implementation status"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasRequirementLevel> "Associates a policy with an requirement level."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasVersion> "Defines a policy's version."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#assignedTo> "Associates a policy to the agent that is responsible for the application of the policy (person or role)."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasLanguage> "Associates a policy with the language used for the policy definition."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#Policy> "Policy"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasSubPolicy> "has subpolicy"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#PolicyType> "Policy Type"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#ImplementationStatus> "The level of implementation of a policy"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasAutomationStatus> "Associates a policy with an automation level."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Language> "The language used for the policy definition"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#targetsEntity> "targets entity"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#targetsUsers> "targets users"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Statement> "Detailed definition of the policy contents."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#Statement> "Statement"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#PolicyType> "Not all policies are equal; mandatory ones must be implemented to satisfy law or other requirements, others are aspirational, and most are met with the best possible effort."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#RequirementLevel> "E.g. must, must not, should, shoud not, may, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Language> "E.g. natural language, ReAL, SPIN, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#implementedBy> "Associates a policy with a process that is used to implement the policy."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#targetsUsers> "Associates a policy to the user community the policy has been designed for."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#ImplementationStatus> "Implementation Status"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#implementedBy> "implemented by"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasStatement> "has statement"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#assignedTo> "assigned to"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasPolicyType> "has policy type"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Process> "A sequence of interdependent and linked procedures which, at every stage, consume one or more resources (time, energy, machines, money) to convert inputs (data, material, parts, etc.) into outputs."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#Version> "Version"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#PolicyType> "E.g. mandatory, legal requirement, aspirational, business driven, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasImplementationStatus> "Associates a policy with an implementation level."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasValidationProcess> "Associates a policy with a process that is used to validate the policy."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#Process> "Process"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasAutomationStatus> "has automation status"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#Language> "Language"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasLanguage> "has language"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#RequirementLevel> "The level of a policy's compliance"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#ImplementationStatus> "E.g. implemented, partially implemented, unimplemented, not-implementable, etc."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasValidationProcess> "has validation process"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasStatement> "Associates a policy with a statement, which is a detailed definition of the policy contents."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasRequirementLevel> "has requirement level"^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#RequirementLevel> "Requirement Level"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#AutomationStatus> "The level of automation of a policy. Specifies if a policy implementation requires human intervention."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#hasVersion> "has version"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasPolicyType> "Associates a policy with a policy type."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#PolicyType> "The type of policy."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Version> "A policy's version"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Descriptor> "The various elements describing a policy."^^xsd:string)AnnotationAssertion(rdfs:label <Policy_ODP#Descriptor> "Descriptor"^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#AutomationStatus> "E.g. manual, automated with human intervention, automated with human validation, fully automated, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#hasSubPolicy> "Associates a policy to another policy that is contained in the initial."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#Policy> "A deliberate system of principles to guide decisions and achieve rational outcomes. A policy is a statement of intent, and is implemented as a procedure or protocol."^^xsd:string)AnnotationAssertion(rdfs:comment <Policy_ODP#targetsEntity> "Associates a policy with an entity that is subject to the policy."^^xsd:string)
AnnotationAssertion(rdfs:label <reaction.owl#isOutcomeOf> "è il risultato di"@it)AnnotationAssertion(rdfs:label <reaction.owl#isConcurrentWith> "è simultanea a"@it)AnnotationAssertion(rdfs:label <reaction.owl#hasPreviousAction> "has previous action"@en)AnnotationAssertion(rdfs:label <reaction.owl#hasNextAction> "has next action"@en)AnnotationAssertion(rdfs:label <reaction.owl#Consequence> "Conseguenza"@it)AnnotationAssertion(rdfs:label <reaction.owl#isCoagentWith> "is co-agent with"@en)AnnotationAssertion(rdfs:label <reaction.owl#Action> "Action"@en)AnnotationAssertion(rdfs:label <reaction.owl#ExternalAgent> "Agente esterno"@it)AnnotationAssertion(rdfs:label <reaction.owl#ExternalAgent> "External agent"@en)AnnotationAssertion(rdfs:comment <reaction.owl#ExternalAgent> "External agents cannot react to anything!"@en)AnnotationAssertion(rdfs:comment <reaction.owl#Consequence> "A consequence is a kind of event which is not an outcome of any action, it is just caused by another event"@en)AnnotationAssertion(rdfs:comment <reaction.owl#Action> "Action can produce more than a single event. Mutiple events can share the same position in the sequence."@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#isOutcomeOf> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#hasNextEvent> "ha evento successivo"@it)AnnotationAssertion(rdfs:label <reaction.owl#Reaction> "Reaction"@en)AnnotationAssertion(rdfs:label <reaction.owl#ExternalAction> "External action"@en)AnnotationAssertion(rdfs:label <reaction.owl#isPerformedBy> "è eseguita da"@it)AnnotationAssertion(rdfs:comment <reaction.owl#Reaction> "This class is not intended to be instantiated."@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#isConcurrentWith> <reaction.owl>)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#ExternalAction> <reaction.owl>)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#performs> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#performs> "esegue"@it)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#Consequence> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#raise> "raise"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#isPerformedBy> <reaction.owl>)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#hasNextAction> <reaction.owl>)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#Reaction> <reaction.owl>)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#isCoagentWith> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#hasPreviousEvent> "has previous event"@en)AnnotationAssertion(rdfs:label <reaction.owl#isConcurrentWith> "is cocncurrent with"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#Event> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#hasNextEvent> "has next event"@en)AnnotationAssertion(rdfs:label <reaction.owl#isCoagentWith> "è co-agente con"@en)AnnotationAssertion(rdfs:label <reaction.owl#hasOutcome> "has outcome"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#hasOutcome> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#isRaisedBy> "è provocata da"@it)AnnotationAssertion(rdfs:label <reaction.owl#isPerformedBy> "is performed by"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#Action> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#hasPreviousAction> "ha azione precedente"@it)AnnotationAssertion(rdfs:comment <reaction.owl#Reaction> "Any action raised by some Event is a Reaction"@en)AnnotationAssertion(rdfs:comment <reaction.owl#isOutcomeOf> "Is also true that some outcome follows some action"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#isConsequenceOf> <reaction.owl>)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#hasConsequence> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#Event> "Evento"@it)AnnotationAssertion(rdfs:label <reaction.owl#hasPreviousEvent> "ha evento precedente"@it)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#hasPreviousEvent> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#Consequence> "Consequence"@en)AnnotationAssertion(rdfs:label <reaction.owl#Event> "Event"@en)AnnotationAssertion(rdfs:label <reaction.owl#ExternalAction> "Azione esterna"@it)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#ExternalAgent> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#isOutcomeOf> "is outcome of"@en)AnnotationAssertion(rdfs:label <reaction.owl#performs> "performs"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#hasNextEvent> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#isRaisedBy> "is raised by"@en)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#hasPreviousAction> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#hasOutcome> "ha come risultato"@it)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#isRaisedBy> <reaction.owl>)AnnotationAssertion(rdfs:label <reaction.owl#raise> "provoca"@it)AnnotationAssertion(rdfs:label <reaction.owl#Action> "Azione"@it)AnnotationAssertion(rdfs:label <reaction.owl#Reaction> "Reazione"@it)AnnotationAssertion(rdfs:isDefinedBy <reaction.owl#raise> <reaction.owl>)AnnotationAssertion(rdfs:comment <reaction.owl#hasOutcome> "Is also true that some action directly preceeds its outcome"@en)AnnotationAssertion(rdfs:label <reaction.owl#hasNextAction> "has azione successiva"@it)
AnnotationAssertion(rdfs:isDefinedBy <taskrole.owl#isTaskOf> <taskrole.owl>)AnnotationAssertion(rdfs:comment <taskrole.owl#hasTask> "A relation between roles and tasks, e.g. 'students have the duty of giving exams' (i.e. the Role 'student' hasTask the Task 'giving exams')."^^xsd:string)AnnotationAssertion(rdfs:comment <taskrole.owl#isTaskOf> "A relation between roles and tasks, e.g. 'students have the duty of giving exams' (i.e. the Role 'student' hasTask the Task 'giving exams')."^^xsd:string)AnnotationAssertion(rdfs:label <taskrole.owl#isTaskOf> "è un obiettivo per"@it)AnnotationAssertion(rdfs:label <taskrole.owl#Role> "Role"@en)AnnotationAssertion(rdfs:label <taskrole.owl#Task> "Task"@en)AnnotationAssertion(rdfs:isDefinedBy <taskrole.owl#hasTask> <taskrole.owl>)AnnotationAssertion(rdfs:label <taskrole.owl#Role> "Ruolo"@it)AnnotationAssertion(rdfs:isDefinedBy <taskrole.owl#Role> <taskrole.owl>)AnnotationAssertion(rdfs:label <taskrole.owl#Task> "Task"@it)AnnotationAssertion(rdfs:comment <taskrole.owl#Task> "A piece of work to be done or undertaken. A Task is assigned to only Roles through the property isTaskOf."^^xsd:string)AnnotationAssertion(rdfs:label <taskrole.owl#hasTask> "ha come obiettivo"@it)AnnotationAssertion(rdfs:label <taskrole.owl#isTaskOf> "is a target for"@en)AnnotationAssertion(rdfs:label <taskrole.owl#hasTask> "has target"@en)AnnotationAssertion(rdfs:isDefinedBy <taskrole.owl#Task> <taskrole.owl>)AnnotationAssertion(rdfs:comment <taskrole.owl#Role> "A concept that classifies an object. For example, the role developer classifies a person, the role server classifies a computer machine.  A hasTask only Tasks."^^xsd:string)
AnnotationAssertion(rdfs:comment <collectionentity.owl#hasMember> "The link to the members of a Set"^^xsd:string)AnnotationAssertion(rdfs:comment <set.owl#size> "size - The number of items belonging to a collection"^^xsd:string)AnnotationAssertion(rdfs:label <set.owl#Set> "set"^^xsd:string)AnnotationAssertion(rdfs:label <set.owl#size> "size"^^xsd:string)AnnotationAssertion(rdfs:comment <set.owl#Set> "Set - A collection that cannot contain duplicate elements."^^xsd:string)
AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#hasAggregatedMember> "has aggregated member"@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#ObjectByCardinality> "Object by cardinality"@en)AnnotationAssertion(rdfs:comment <SimpleOrAggregated.owl#AggregatedObject> "Un objeto resultante de la agregación de dos o más objetos."@es)AnnotationAssertion(rdfs:comment <SimpleOrAggregated.owl#Object> "Cualquier objeto físico, social o mental o sustancia."@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#isAggregatedMemberOf> "is aggregated member of"@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#isDirectAggregatedMemberOf> "is direct aggregated member of"@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#AggregatedObject> "Objeto agregado"@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#hasDirectAggregatedMember> "has direct aggregated member "@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#ObjectByCardinality> "Objeto por cardinalidad"@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#hasDirectAggregatedMember> "tiene miembro agregado directamente"@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#isAggregatedMemberOf> "es miembro agregado de"@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#Object> "Objeto"@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#SimpleObject> "Simple object"@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#AggregatedObject> "Aggregated object"@en)AnnotationAssertion(rdfs:comment <SimpleOrAggregated.owl#SimpleObject> "A simple object, that is, an object that has no aggregated objects."@en)AnnotationAssertion(rdfs:comment <SimpleOrAggregated.owl#AggregatedObject> "An object that is an aggregation of two or more objects."@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#Object> "Object"@en)AnnotationAssertion(<cpannotationschema.owl#isCloneOf> <SimpleOrAggregated.owl#Object> "DUL.owl#Object"^^xsd:string)AnnotationAssertion(rdfs:comment <SimpleOrAggregated.owl#SimpleObject> "Un objeto simple, es decir, un objeto que no tiene objetos agregados."@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#hasAggregatedMember> "tiene miembro agregado"@es)AnnotationAssertion(rdfs:comment <SimpleOrAggregated.owl#Object> "Any physical, social, or mental object, or a substance."@en)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#isDirectAggregatedMemberOf> "es miembro agregado directamente de"@es)AnnotationAssertion(rdfs:label <SimpleOrAggregated.owl#SimpleObject> "Objeto simple"@es)
AnnotationAssertion(rdfs:comment <speciesbathymetry.owl#hasBathymetricRange> "has bathymetric range"@en)AnnotationAssertion(rdfs:label <speciesbathymetry.owl#hasRangeMax> "has range max"@en)AnnotationAssertion(rdfs:label <speciesbathymetry.owl#BathymetricRange> "Bathymetric range"@en)AnnotationAssertion(rdfs:label <speciesbathymetry.owl#isBathymetricRangeOf> "is bathymetric range of"@en)AnnotationAssertion(rdfs:label <speciesbathymetry.owl#hasBathymetricRange> "has bathymetric range"@en)AnnotationAssertion(rdfs:comment <speciesbathymetry.owl#BathymetricRange> "This class contains the set of bathymetric ranges. Bathymetry is numeric depth information about the ranges in which an aquatic species is found.
It can be mapped to fi:Bathymetry."^^xsd:string)AnnotationAssertion(rdfs:comment <aquaticresources.owl#AquaticSpecies> "Here also the complex type SpeciesFeature (holding association with BathymetricRange) is the schema mapping required to refer to BathymetricRange. Any mapping has to take care of that, e.g. maps(AquaticSpecies, owl:unionOf(SpeciesRef, SpeciesFeature))."^^xsd:string)AnnotationAssertion(rdfs:label <speciesbathymetry.owl#hasRangeMin> "has range min"@en)AnnotationAssertion(rdfs:comment <speciesbathymetry.owl#isBathymetricRangeOf> "is bathymetric range of"@en)
AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#isTaggingAgentIn> <tagging.owl>)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#usingTag> <tagging.owl>)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#Tag> <tagging.owl>)AnnotationAssertion(rdfs:label <tagging.owl#fromCloud> "from cloud"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#byAgent> <tagging.owl>)AnnotationAssertion(rdfs:label <tagging.owl#Tag> "Tag"@en)AnnotationAssertion(rdfs:label <tagging.owl#isTagUsedIn> "isTagUsedIn"^^xsd:string)AnnotationAssertion(rdfs:label <tagging.owl#isTagCloudOf> "is tag cloud of"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#Tagging> <tagging.owl>)AnnotationAssertion(rdfs:label <tagging.owl#Folksonomy> "Folksonomy"@en)AnnotationAssertion(rdfs:comment <tagging.owl#Tagging> "The tagging relation, represented as a class following the situation design pattern.
It includes, as suggested by Gruber's proposal, a Tag, a (tagged) Thing, a (source) Folksonomy, a (tagger) Agent, and a polarity. Moreover, this axiomatization also includes a TimeInterval at which the tagging happens. The tagged thing can actually have a content that is the actual target of tagging.

For example, let's see the semantics of the following cases of Tagging:
(1) a Flickr picture showing a leopard, tagged with the Tag 'leopard'
(2) a Flickr picture showing Tim Berners-Lee, tagged with the Tag 'Tim'
(3) a Flickr picture showing Tim Berners-Lee, tagged with the Tag 'the founder of the semantic web'
(4) a Flickr picture showing a girl having breakfast, tagged with the Tag 'me'
(5) a Flickr picture showing a boy surfing with a sombrero hat, tagged with the Tag 'cool'
(6) a Flickr picture that is tagged as 'taken in Sicily'
In cases (1)-(5), the pictures are about certain entities (a certain leopard, Tim Berners-Lee, a certain girl, a surfing boy), and the tag addresses tham, rather than the pictures (case 6).

Therefore, an act of tagging is not different from a generic linguistic act, except that it necessarily references something that is also referenced by a web resource: a condition that of course does not apply to generalized linguistic acts."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#isTagUsedIn> <tagging.owl>)AnnotationAssertion(rdfs:label <tagging.owl#usingTag> "usingTag"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#isTagCloudOf> <tagging.owl>)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#Folksonomy> <tagging.owl>)AnnotationAssertion(rdfs:label <tagging.owl#Tag> "Tag"@it)AnnotationAssertion(rdfs:comment <tagging.owl#Tag> "The typical elements of folksonomies, used to add a hint for the interpretation of web resources in so-called situations of 'Tagging'.
Tags are considered here as InformationObject(s) that have a folksonomy as their schema.
A Tag is typically used to add an element of interpretation to some document, i.e. 'forcing' the reader to see that document from the viewpoint that can be built by pairing the Tag interpretation with the document interpretation. For example, an image of St. Peter's dome can be tagged as 'Michelangelo', 'Big ovoid', 'trip to Rome', etc., thus forcing the interpretation of the dome image towards artistic design, geometry, or private memories."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#fromCloud> <tagging.owl>)AnnotationAssertion(rdfs:isDefinedBy <tagging.owl#hasPolarity> <tagging.owl>)AnnotationAssertion(rdfs:label <tagging.owl#hasPolarity> "has polarity"@en)AnnotationAssertion(rdfs:label <tagging.owl#Folksonomy> "Tag cloud"^^xsd:string)AnnotationAssertion(rdfs:comment <tagging.owl#Folksonomy> "A collection of tags or metadata that have no formal semantics, and are typically used sparsely to annotate texts, images, bookmarks, etc. Folksonomies are typically maintained by communities through web-based services or systems, and do not have any systematic intent, such as that shared by KOS(es)."^^xsd:string)AnnotationAssertion(rdfs:label <tagging.owl#Tagging> "Tagging"@en)
AnnotationAssertion(rdfs:isDefinedBy <taskexecution.owl#executesTask> <taskexecution.owl>)AnnotationAssertion(rdfs:label <taskexecution.owl#isExecutedIn> "è eseguito mediante"@it)AnnotationAssertion(rdfs:isDefinedBy <taskexecution.owl#Action> <taskexecution.owl>)AnnotationAssertion(rdfs:isDefinedBy <taskexecution.owl#isExecutedIn> <taskexecution.owl>)AnnotationAssertion(rdfs:label <taskexecution.owl#executesTask> "esegue il task"@it)AnnotationAssertion(rdfs:comment <taskexecution.owl#Action> "An Event with at least one Agent that isParticipantIn it, and that executes a Task that typically isDefinedIn a Plan, Workflow, Project, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <taskexecution.owl#executesTask> "A relation between an action and a task, e.g. 'putting some water in a pot and putting the pot on a fire until the water starts bubbling' executes the task 'boiling'."^^xsd:string)AnnotationAssertion(rdfs:label <taskexecution.owl#Action> "Azione"@it)AnnotationAssertion(rdfs:comment <taskexecution.owl#isExecutedIn> "A relation between an action and a task, e.g. 'putting some water in a pot and putting the pot on a fire until the water starts bubbling' executes the task 'boiling'."^^xsd:string)AnnotationAssertion(rdfs:label <taskexecution.owl#isExecutedIn> "is executed in"@en)AnnotationAssertion(rdfs:label <taskexecution.owl#executesTask> "executes task"@en)AnnotationAssertion(rdfs:label <taskexecution.owl#Action> "Action"@en)
AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#includesEvent> "includes event"@en)AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#includesEvent> "include l'evento"@it)AnnotationAssertion(rdfs:isDefinedBy <timeindexedparticipation.owl#TimeIndexedParticipation> <timeindexedparticipation.owl>)AnnotationAssertion(rdfs:isDefinedBy <timeindexedparticipation.owl#isEventIncludedIn> <timeindexedparticipation.owl>)AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#includesObject> "include l'oggetto"@it)AnnotationAssertion(rdfs:isDefinedBy <timeindexedparticipation.owl#includesEvent> <timeindexedparticipation.owl>)AnnotationAssertion(rdfs:isDefinedBy <timeindexedparticipation.owl#includesObject> <timeindexedparticipation.owl>)AnnotationAssertion(rdfs:comment <timeindexedparticipation.owl#TimeIndexedParticipation> "A Situation that represents participation of Object(s) in Event(s) at some Time."^^xsd:string)AnnotationAssertion(rdfs:comment <timeindexedparticipation.owl#includesEvent> "A relation between situations and events, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included a burning of my fingers)."^^xsd:string)AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#isObjectIncludedIn> "is object included in"@en)AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#TimeIndexedParticipation> "Time indexed participation"@en)AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#isEventIncludedIn> "is event included in"@en)AnnotationAssertion(rdfs:isDefinedBy <timeindexedparticipation.owl#isObjectIncludedIn> <timeindexedparticipation.owl>)AnnotationAssertion(rdfs:label <timeindexedparticipation.owl#includesObject> "includes object"@en)AnnotationAssertion(rdfs:comment <timeindexedparticipation.owl#includesObject> "A relation between situations and objects, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me)."^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy <topic.owl#Concept> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#nearTopicTo> "è un argomento vicino a"@it)AnnotationAssertion(rdfs:comment <topic.owl#Topic> "A topic, or subject, argument, domain, theme, subject area, etc.
Topics have a controversial intuition across common sense, document management systems, knowledge organization systems, etc.

There is an interesting duality of topics: they are commonly interpreted as areas of shared knowledge within a Community (therefore as collections of social objects). On the other hand, existing directories and thesauri use 'topic' (or 'subject') more restrictively, as a relation between a document and a concept. 

For example, thesauri do not usually distinguish when their 'concepts' (cf. skos:Concept) are actually intended as concepts (in the sense of Concept in this pattern) and when they are intended as topics. The distinction is clear when you compare these two sample sentences: 'the football topic is part of the sport topic' vs. 'the concept of football is part of the concept of sport'. 
While the first is perfectly acceptable, the second is counterintuitive and even possibly wrong. This effect is due to the fact that concepts are 'intensional' notions and are not intended as areas of knowledge, document spaces, etc., which are 'extensional' notions.

Accordingly to these basic observations, in this pattern Concept and Topic result to be disjoint, and an appropriate representation should be in place in order to model thesauri. E.g. skos:Concept should be mapped to the union of Concept and Topic."^^xsd:string)AnnotationAssertion(rdfs:comment <topic.owl#isCoreConceptFor> "A Concept is a core concept for a Topic when it can classify many entities that have that Topic.
For example, Saxophone (as a Concept) isCoreConceptFor Saxophones (as a Topic)."^^xsd:string)AnnotationAssertion(rdfs:label <topic.owl#hasTopic> "has topic"@en)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#isCoreConceptFor> <topic.owl>)AnnotationAssertion(rdfs:comment <topic.owl#Concept> "A Concept is a social object, which is used to classify entities. Differently from a Topic
Both concepts and topics are used to classify entities, but concepts typically have an \"is a\" relation to the entities; e.g. 
(1) A biography of Brigitte Bardot hasTopic 'star system' (Topic)
(2) A biography of Brigitte Bardot is a Biography (Concept)
(3) A biography of Claude Chabrol hasTopic 'Nouvelle Vague' (Topic)
(4) The Nouvelle Vague is a CulturalMovement (Concept)"^^xsd:string)AnnotationAssertion(rdfs:comment <topic.owl#isSubTopicOf> "The relation between two Topic(s), in terms of their cultural coverage. For example, Football isSubTopicOf Sport. 
It can be used widely to talk about document annotations, subject directories, etc."^^xsd:string)AnnotationAssertion(rdfs:label <topic.owl#isTopicOf> "is topic of"@en)AnnotationAssertion(rdfs:label <topic.owl#overlappingTopic> "overlapping topic"@en)AnnotationAssertion(rdfs:label <topic.owl#Topic> "Argomento"@it)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#hasTopic> <topic.owl>)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#farTopicFrom> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#isSubTopicOf> "is sub topic of"@en)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#overlappingTopic> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#hasTopic> "ha argomento {it}"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#nearTopicTo> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#farTopicFrom> "è un argomento lontano da"@it)AnnotationAssertion(rdfs:comment <topic.owl#isTopicOf> "The relation between something and its Topic (subject, argument, domain, theme, subject area, etc.). It can be used widely to talk about document annotations, subject directories, etc.
hasTopic is very general. For example, consider the following cases:
(1) A biography of Brigitte Bardot hasTopic 'star system'
(2) The concept of 'starlet' hasTopic 'cinema'
(3) A biography of Claude Chabrol hasTopic 'Nouvelle Vague'."^^xsd:string)AnnotationAssertion(rdfs:label <topic.owl#isCoreConceptFor> "è concetto centrale di {it}"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#Topic> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#isSubTopicOf> "è argomento più specifico di {it}"^^xsd:string)AnnotationAssertion(rdfs:comment <topic.owl#nearTopicTo> "The vicinity relation between two topics, e.g. 'star system' (as a Topic) is nearTopicTo 'cinema' (as a Topic).
Vicinity is typically established with reference to a threshold on the number of concepts or entities that are common to the two Topic(s), or based on a geometrical semantics applied to the spaces common between two topics (cf. ontopic.owl ontology)."^^xsd:string)AnnotationAssertion(rdfs:label <topic.owl#hasSubTopic> "has subtopic"@en)AnnotationAssertion(rdfs:label <topic.owl#farTopicFrom> "far topic from"@en)AnnotationAssertion(rdfs:label <topic.owl#hasCoreConcept> "has core concept"@en)AnnotationAssertion(rdfs:comment <topic.owl#hasSubTopic> "The relation between two instances of a Topic, in terms of their cultural coverage. For example, Sport hasSubTopic Football. 
It can be used widely to talk about document annotations, subject directories, etc."^^xsd:string)AnnotationAssertion(rdfs:label <topic.owl#Concept> "Concetto"@it)AnnotationAssertion(rdfs:label <topic.owl#Topic> "Topic"@en)AnnotationAssertion(rdfs:comment <topic.owl#hasCoreConcept> "A Concept is a core concept for a Topic when it can classify many entities that have that Topic.
For example, Saxophone (as a Concept) isCoreConceptFor Saxophones (as a Topic)."^^xsd:string)AnnotationAssertion(rdfs:label <topic.owl#isTopicOf> "è argomento di"@it)AnnotationAssertion(rdfs:label <topic.owl#nearTopicTo> "near topic to"@en)AnnotationAssertion(rdfs:label <topic.owl#hasSubTopic> "ha argomento più specifico {it}"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#isSubTopicOf> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#Concept> "Concept"@en)AnnotationAssertion(rdfs:comment <topic.owl#overlappingTopic> "The relation between two topics, e.g. 'star system' (as a Topic) is overlappingTopic with 'Bollywood movies' (as a Topic).
Overlap is typically established with reference to a threshold on the number of concepts or entities that are common between the two topics. Alternatively, it can be established with reference to the a geometrical semantics applied to the spaces (super-topics) of which topics are part (cf. ontopic.owl ontology)."^^xsd:string)AnnotationAssertion(rdfs:comment <topic.owl#hasTopic> "The relation between something and its Topic (subject, argument, domain, theme, subject area, etc.). It can be used widely to talk about document annotations, subject directories, etc.
hasTopic is very general. For example, consider the following cases:
(1) A biography of Brigitte Bardot hasTopic 'star system'
(2) The concept of 'starlet' hasTopic 'cinema'
(3) A biography of Claude Chabrol hasTopic 'Nouvelle Vague'."^^xsd:string)AnnotationAssertion(rdfs:comment <topic.owl#farTopicFrom> "The opposite to vicinity relation between two topics, e.g. 'star system' (as a Topic) is farTopicFrom 'geology' (as a Topic).
Distance is typically established with reference to a threshold on the number of concepts or entities that are common between the two topics. Alternatively, it can be established with reference to the a geometrical semantics applied to the spaces (super-topics) of which topics are part (cf. ontopic.owl ontology)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#isTopicOf> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#hasTopic> "ha argomento"@it)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#hasSubTopic> <topic.owl>)AnnotationAssertion(rdfs:label <topic.owl#isCoreConceptFor> "is core concept for"@en)AnnotationAssertion(rdfs:isDefinedBy <topic.owl#hasCoreConcept> <topic.owl>)
AnnotationAssertion(rdfs:label <transition.owl#includesProcess> "includesProcess"^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#isFinalSituationIncludedIn> "isFinalSituationIncludedIn"^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#includesFinalSituation> "includesFinalSituation"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#includesProcess> <transition.owl>)AnnotationAssertion(rdfs:label <transition.owl#hasInitialStateAtTime> "atTimeInitial"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#hasFinalStateAtTime> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#includesFinalSituation> <transition.owl>)AnnotationAssertion(rdfs:label <transition.owl#Process> "Process"@en)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#hasEventAtTime> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#hasInitialStateAtTime> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isInitialStateTimeIndexFor> <transition.owl>)AnnotationAssertion(rdfs:comment <transition.owl#Transition> "In this pattern, it is the entity that is invariant across the Process underlying the transition, but is also changed from an initial to a final state by an Event."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isTimeOf> <transition.owl>)AnnotationAssertion(rdfs:comment <transition.owl#isInitialSituationIncludedIn> "A relation between a transition situation and the situation existing before  the transition event."^^xsd:string)AnnotationAssertion(rdfs:comment <transition.owl#isFinalSituationIncludedIn> "A relation between a transition situation and the situation resulting from the transition."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isProcessIncludedIn> <transition.owl>)AnnotationAssertion(rdfs:label <transition.owl#isInitialStateTimeIndexFor> "is initial state time index for"^^xsd:string)AnnotationAssertion(rdfs:comment <transition.owl#Transition> "A transition is a Situation that creates a context for three TimeInterval(s), two additional different Situation(s), one Event, one Process, and at least one Object: the Event is observed as the cause for the transition, one Situation is the state before the transition, the second Situation is the state after the transition, the Process is the invariance under some different transitions (including the one represented here), in which at least one Object is situated. Finally, the time intervals position the situations and the transitional event in time.
This class of situations partly encodes the ontology underlying typical engineering algebras for processes, e.g. Petri Nets. 
A full representation of the transition ontology is outside the expressivity of OWL, because we would need qualified cardinality restrictions,  coreference, property equivalence, and property composition."^^xsd:string)AnnotationAssertion(rdfs:comment <transition.owl#includesInitialSituation> "A relation between a transition situation and the situation existing before  the transition event."^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#hasEventAtTime> "atTimeEvent"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#Process> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isFinalStateTimeIndexFor> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#Transition> <transition.owl>)AnnotationAssertion(rdfs:comment <transition.owl#hasInitialStateAtTime> "The time of the initial state in the transition."^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#isInitialSituationIncludedIn> "isInitialSituationIncludedIn"^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#hasFinalStateAtTime> "atTimeFinal"^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#includesInitialSituation> "includesInitialSituation"^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#Transition> "Transizione"@it)AnnotationAssertion(rdfs:comment <transition.owl#includesFinalSituation> "A relation between a transition situation and the situation resulting from the transition."^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#isProcessIncludedIn> "isProcessIncludedIn"^^xsd:string)AnnotationAssertion(rdfs:comment <transition.owl#hasFinalStateAtTime> "The time of the final state of the transition."^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#occursAt> "occursAt"^^xsd:string)AnnotationAssertion(rdfs:comment <transition.owl#hasEventAtTime> "The time of the event causing the transition."^^xsd:string)AnnotationAssertion(rdfs:comment <transition.owl#includesProcess> "A relation between a transition situation and the underlying process that  is invariant for the object(s) included in the transition."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isInitialSituationIncludedIn> <transition.owl>)AnnotationAssertion(rdfs:comment <transition.owl#Process> "The invariance under some different transitions (including the one represented here), in which at least one Object is situated."^^xsd:string)AnnotationAssertion(rdfs:comment <participation.owl#Event> "In this pattern, it is the cause for the transition."^^xsd:string)AnnotationAssertion(rdfs:comment <participation.owl#Object> "In this pattern, it is the entity that is invariant through the Process underlying  the transition, but is also changed by the Event that causes the transition."^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#isTimeOf> "isTimeOf"^^xsd:string)AnnotationAssertion(rdfs:label <transition.owl#Transition> "Transition"@en)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isFinalSituationIncludedIn> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#isEventTimeIndexFor> <transition.owl>)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#includesInitialSituation> <transition.owl>)AnnotationAssertion(rdfs:comment <transition.owl#isProcessIncludedIn> "A relation between a transition situation and the underlying process that  is invariant for the object(s) included in the transition."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <transition.owl#occursAt> <transition.owl>)
AnnotationAssertion(rdfs:label <verticaldistribution.owl#isResourceOf> "is resource of"@en)AnnotationAssertion(rdfs:label <verticaldistribution.owl#VerticalDistribution> "Vertical distribution"@en)AnnotationAssertion(rdfs:label <verticaldistribution.owl#hasReferenceYear> "has reference year"@en)AnnotationAssertion(rdfs:label <verticaldistribution.owl#isVerticalDistributionOf> "is vertical distribution of"@en)AnnotationAssertion(rdfs:comment <verticaldistribution.owl#AquaticResource> "A fishery resource (a collection of actual aquatic organisms) that can include aquatic organisms from different AquaticSpecies, and is localized in some WaterArea.
It can be mapped to fi:AqResRef"^^xsd:string)AnnotationAssertion(rdfs:comment <verticaldistribution.owl#AquaticResourceObservation> "An observation of a resource characterised by different parameters."^^xsd:string)AnnotationAssertion(rdfs:label <verticaldistribution.owl#AquaticResourceObservation> "Aquatic resource observation"@en)AnnotationAssertion(rdfs:label <verticaldistribution.owl#hasResource> "has resource"@en)AnnotationAssertion(rdfs:label <verticaldistribution.owl#AquaticResource> "Aquatic resource"@en)AnnotationAssertion(rdfs:label <verticaldistribution.owl#hasVerticalDistribution> "has vertical distribution"@en)
AnnotationAssertion(rdfs:label <vesselspecies.owl#isCaughtBy> "is caught by"@en)AnnotationAssertion(rdfs:comment <vesselspecies.owl#isCaughtBy> "Actually a composed property: this needs either a property chain, a SPARQL query, or a SWRL rule to gather a value. E.g. in SPARQL:

CONSTRUCT {?x :catchesSpecies ?y . ?y isCaughtBy ?x}
WHERE {
?x gearvessel:usesGearType ?z .
?z gearspecies:catchesSpecies ?y
}"^^xsd:string)AnnotationAssertion(rdfs:comment <vesselspecies.owl#catchesSpecies> "Actually a composed property: this needs either a property chain, a SPARQL query, or a SWRL rule to gather a value. E.g. in SPARQL:

CONSTRUCT {?x :catchesSpecies ?y . ?y isCaughtBy ?x}
WHERE {
?x gearvessel:usesGearType ?z .
?z gearspecies:catchesSpecies ?y
}"^^xsd:string)AnnotationAssertion(rdfs:label <vesselspecies.owl#isCaughtByVesselType> "is caught by vessel type"@en)AnnotationAssertion(rdfs:label <vesselspecies.owl#catchesSpecies> "catches species"@en)
AnnotationAssertion(rdfs:comment <trajectory#startsFrom> "Connects a segment to the fix it starts from."^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#atTime> "Connects anything (including fixes in this pattern) to TimeEntity"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#hasSegment> "Relating the trajectory to each of its segments."^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#Place> "This is the hook to other pattern/ontology that describes the notion of place, which is more general than just a location/geo-coordinate."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#startsFrom> "startsFrom"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#hasSegment> "hasSegment"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#Place> "Place"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#atTime> "atTime"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#hasAttribute> "hasAttribute"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#endsAt> "endsAt"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#EndingFix> "The last fix in a particular sequence of fixes."^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#TimeEntity> "The hook to class/pattern/ontology that models time, this class provides the temporal extent of the trajectory. One example of time model is the W3C Time Ontology."^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#Segment> "The Segment class captures the \"connection\" between two consecutive fixes. That is, a segment starts from a fix and ends at another fix. If the pattern is used to model the trajectory of some moving object, each segment is traversed by that moving object. Additional information about a segment can be attached as attributes."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#Attribute> "Attribute"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#atPlace> "Connects anything (including fixes in this pattern) to Place."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#TimeEntity> "TimeEntity"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#StartingFix> "The first fix in a particular sequence of fixes."^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#Attribute> "Captures additional information that enriches some fix or segment."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#Segment> "Segment"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#hasFix> "Relating the trajectory to each of its fixes."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#atPlace> "atPlace"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#hasAttribute> "Connects a fix or a segment to an additional information as represented by an instance of Attribute."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#StartingFix> "StartingFix"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#hasTrajectory> "Anything that has a trajectory can use this property to connect it to the trajectory instance."^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#MovingObject> "This is the hook to an ontology/pattern that describes the moving object, if any, which moves along the trajectory."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#EndingFix> "EndingFix"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#nextFix> "Relates one fix to the immediately following fix in the sequence."^^xsd:string)AnnotationAssertion(rdfs:seeAlso <trajectory#TimeEntity> <time>)AnnotationAssertion(rdfs:comment <trajectory#traversedBy> "Connect a segment to the moving object that traverses it."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#MovingObject> "MovingObject"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#Trajectory> "Represents the notion of trajectory, this is the main class that can be hooked with other patterns that use the Trajectory pattern. Trajectory in this model is understood as a sequence of fixes connected by segments. There is exactly one starting fix and exactly one ending fix. Each fix has a temporal extent and a place (which is more general than just a location)."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#nextFix> "nextFix"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#traversedBy> "traversedBy"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#Fix> "Describes a fix, which is an adorned spatiotemporal point. A sequence of fixes form the trajectory."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#hasTrajectory> "hasTrajectory"^^xsd:string)AnnotationAssertion(rdfs:comment <trajectory#endsAt> "Connects a segment to the fix it ends at."^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#Trajectory> "Trajectory"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#Fix> "Fix"^^xsd:string)AnnotationAssertion(rdfs:label <trajectory#hasFix> "hasFix"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy <hasValue> <>)AnnotationAssertion(rdfs:isDefinedBy <hasGainofOpticalFilter> <>)AnnotationAssertion(rdfs:comment <channel> "the channel id of a interface."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0010008> "kilometer per hour"^^xsd:string)AnnotationAssertion(rdfs:comment <hasJoinDate> "the join date of the user device"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000331> "gigabyte"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000223> <uo.owl>)AnnotationAssertion(rdfs:comment <hasLiFiUserEquipmentProperty> "properties of LiFi user equipments."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000105> "frequency unit"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasServiceEndTime> <>)AnnotationAssertion(rdfs:comment <WiFiWLAN> "WLAN interface on the devices in LIFi network, e.g., LiFi user equipment, LiFi access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <unit> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <hasService> <>)AnnotationAssertion(rdfs:comment <UserDevice> "User Devices, requiring connectivity services, e.g., phones, tablets, laptops, wearable devices, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000036> <uo.owl>)AnnotationAssertion(rdfs:label <UO_0000010> "second"^^xsd:string)AnnotationAssertion(rdfs:comment <hasGainOfConcentrator> "The gain of the concentrator on the LiFi user equipment, usually equals to 1."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000016> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <hasUnits> <>)AnnotationAssertion(rdfs:isDefinedBy <tableId> <>)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#alt> <wgs84_pos#>)AnnotationAssertion(rdfs:isDefinedBy <hasIncidentAngle> <>)AnnotationAssertion(rdfs:isDefinedBy <hasDevice> <>)AnnotationAssertion(rdfs:comment <Switch> "A network switch (also called switching hub, bridging hub, officially MAC bridge) is a computer networking device that connects devices together on a computer network by using packet switching to receive, process, and forward data to the destination device."^^xsd:string)AnnotationAssertion(rdfs:comment <dlSrc> "the Ethernet source address of the flow. It should be an MAC address with 6 pairs of hexadecimal digits"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000113> "power unit"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000034> "week"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000224> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000031> <uo.owl>)AnnotationAssertion(rdfs:comment <SatelliteAssociation> "the milli-meter electromagnetic wave carring modulated signal between satellite base stations and ground station."^^xsd:string)AnnotationAssertion(rdfs:comment <Flow> "the flow entry in a flow table inside a switch or route. Defined by OpenFlow protocol."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000111> <uo.owl>)AnnotationAssertion(rdfs:comment <User> "reused from foaf (). Represent a user in the telecommunication system."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <lastName> <>)AnnotationAssertion(rdfs:isDefinedBy <hasUnit> <>)AnnotationAssertion(rdfs:isDefinedBy <hasPacketLoss> <>)AnnotationAssertion(rdfs:comment <frequency> "the frequency of the radio wave transmitted by a wireless interface (WLAN)."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000232> "bit"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasLinkProperty> <>)AnnotationAssertion(rdfs:isDefinedBy <to> <>)AnnotationAssertion(rdfs:isDefinedBy <hasBandwidth> <>)AnnotationAssertion(rdfs:isDefinedBy <hasFlowAction> <>)AnnotationAssertion(rdfs:comment <hasInterface> "the fact that a device has a interface."^^xsd:string)AnnotationAssertion(rdfs:comment <LTEAssociation> "the electromagnetic wave carring modulated signal between LTE base station, or eNodeB, and user equipment"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000224> "kilowatt-hour"^^xsd:string)AnnotationAssertion(rdfs:comment <LiFiWLAN> "WLAN interface on the devices in LIFi network, e.g., LiFi user equipment, LiFi access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasFieldOfView> <>)AnnotationAssertion(rdfs:comment <hasUserID> "the user ID of the user"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000028> "millisecond"^^xsd:string)AnnotationAssertion(rdfs:comment <hasBandwidth> "the bandwidth of the link"^^xsd:string)AnnotationAssertion(rdfs:comment <hasAssociatedStations> "in wireless networks, the user equipments (mobile stations in another term, e.g., phones, laptops, tablets, etc.) that are associated to the access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasRespansivity> <>)AnnotationAssertion(rdfs:label <UO_0000058> "rotational frequency unit"^^xsd:string)AnnotationAssertion(rdfs:comment <UserEquipment> "any device used directly by an end-user to communicate. It can be a hand-held telephone, a laptop computer equipped with a mobile broadband adapter, or any other device."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <ssid> <>)AnnotationAssertion(rdfs:comment <firstName> "the first name of a user."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000008> "meter"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasDistance> <>)AnnotationAssertion(rdfs:comment <hasServiceEndTime> "the time that a service ends."^^xsd:string)AnnotationAssertion(rdfs:comment <SystemDevice> "All the physical facilities in the telecommunication system that provide the communication service to uses. For example: base station towers, Wi-Fi access points, switches, servers, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <unit> "reused from Units of measurement Ontology"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000325> "megaHertz"^^xsd:string)AnnotationAssertion(rdfs:comment <WLAN> "A wireless local area network (WLAN) interface, also known as WLAN, is the interface of a wireless computer network that links two or more devices using wireless communication within a limited area such as a home, school, computer laboratory, or office building."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasInterface> <>)AnnotationAssertion(rdfs:isDefinedBy <Person> <>)AnnotationAssertion(rdfs:comment <hasLiFiAccessPointProperty> "datatype properties dedicated for LiFi access points"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasAntennaGain> <>)AnnotationAssertion(rdfs:label <UO_0000035> "month"^^xsd:string)AnnotationAssertion(rdfs:comment <from> "the source node that the link is transmit from."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasIP> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000010> <uo.owl>)AnnotationAssertion(rdfs:comment <hasUnit> "reused from SENSEI Observation and Measurement Ontology."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000111> "energy unit"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasDatarate> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000028> <uo.owl>)AnnotationAssertion(rdfs:comment <hasServiceStatus> "the status of the service."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000331> <uo.owl>)AnnotationAssertion(rdfs:comment <wgs84_pos#location> "The relation between something and the point, 
 or other geometrical thing in space, where it is.  For example, the realtionship between
 a radio tower and a Point with a given lat and long.
 Or a relationship between a park and its outline as a closed arc of points, or a road and
 its location as a arc (a sequence of points).
 Clearly in practice there will be limit to the accuracy of any such statement, but one would expect
 an accuracy appropriate for the size of the object and uses such as mapping ."^^xsd:string)AnnotationAssertion(rdfs:comment <hasAntennaHeight> "the height of the antenna of a wireless interface"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0010005> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000008> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <hasMAC> <>)AnnotationAssertion(rdfs:isDefinedBy <from> <>)AnnotationAssertion(rdfs:label <UO_0000001> "length unit"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <channel> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000058> <uo.owl>)AnnotationAssertion(rdfs:comment <hasLiFiAssociationProperty> "The properties of the visiable light association between the LED on LiFi access point and LiFi user equipment."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0010005> "millimeters per day"^^xsd:string)AnnotationAssertion(rdfs:comment <range> "the signal range of wireless devices, such as WiFi access point, LiFi access point, WiFi mobile station, and LiFi mobile station."^^xsd:string)AnnotationAssertion(rdfs:comment <SatelliteGroundStation> "used in satellite network. Also known as earth station, or earth terminal, it is a terrestrial radio station designed for extraplanetary telecommunication with spacecraft (constituting part of the ground segment of the spacecraft system), or reception of radio waves from astronomical radio sources. Ground stations may be located either on the surface of the Earth, or in its atmosphere.[1] Earth stations communicate with spacecraft by transmitting and receiving radio waves in the super high frequency or extremely high frequency bands (e.g., microwaves). When a ground station successfully transmits radio waves to a spacecraft (or vice versa), it establishes a telecommunications link. A principal telecommunications device of the ground station is the parabolic antenna."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hardTimeout> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000232> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <hasTransmitPower> <>)AnnotationAssertion(rdfs:label <UO_0000036> "year"^^xsd:string)AnnotationAssertion(rdfs:comment <CellularUserEquipment> "User deivce in a Cellular network."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000231> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <belongsTo> <>)AnnotationAssertion(rdfs:comment <hasServiceType> "the type of communication services, e.g., video, audio, file transmit, text transmiting, etc."^^xsd:string)AnnotationAssertion(rdfs:label <wgs84_pos#Point> "location"^^xsd:string)AnnotationAssertion(rdfs:comment <isIn> "the relation that a interface belongs to a device. A device can have multiple interfaces, but a interface can be in one and only one device."^^xsd:string)AnnotationAssertion(rdfs:comment <hasFieldOfView> "Field of view (FOV) is the open observable area where a LiFi user equipment could receive visiable light signal. It is defined by let the incident angle of the LiFi user equipment equals to Pi/2.

If the incident angle larger than Pi/2, the light ray is out of the FOV, thus cannot be received by the LiFi user equipment."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000001> <uo.owl>)AnnotationAssertion(rdfs:comment <hasDistance> "the Euclidean distance between the LiFi user equipment and access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasFlowProperty> <>)AnnotationAssertion(rdfs:comment <hasMAC> "the MAC address of the interface."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000092> <uo.owl>)AnnotationAssertion(rdfs:comment <ObervationAndMeasurement> "reused from SenSei Observation And Measurement Ontology (sensordata.owl)."^^xsd:string)AnnotationAssertion(rdfs:comment <hasValue> "the value of an observation or measurement."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasAntennaHeight> <>)AnnotationAssertion(rdfs:comment <LiFiUserEquipment> "any device used directly by an end-user to communicate. It can be a hand-held telephone, a laptop computer equipped with a mobile broadband adapter, or any other device."^^xsd:string)AnnotationAssertion(rdfs:comment <hasServiceStartTime> "the start time of a service."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasLink> <>)AnnotationAssertion(rdfs:comment <LiFiAccessPoint> "The access point in Li-Fi network. Li-Fi is a wireless optical networking technology that uses light-emitting diodes (LEDs) for data transmission."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000031> "minute"^^xsd:string)AnnotationAssertion(rdfs:comment <inPort> "the port number of the in port of the flow, or could be a keyword, such as \"LOCAL\""^^xsd:string)AnnotationAssertion(rdfs:comment <isUP> "indicate whether a interface is up or not."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasFlow> <>)AnnotationAssertion(rdfs:isDefinedBy <hasLiFiUserEquipmentProperty> <>)AnnotationAssertion(rdfs:comment <WiFiUserEquipment> "a user quipment in Wi-Fi network"^^xsd:string)AnnotationAssertion(rdfs:comment <hasRoundTripTime> "the round trip time of a link, which is the time taken for signal travel a round trip via this link."^^xsd:string)AnnotationAssertion(rdfs:comment <toPort> "the port number of the port forward to defined by the to_port property of the flow action OUTPUT."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000114> <uo.owl>)AnnotationAssertion(rdfs:label <UO_0000231> "information unit"^^xsd:string)AnnotationAssertion(rdfs:comment <stationsInRange> "in wireless networks (WiFi/LiFi), the mobile stations in the range of the access points."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000092> "turns per second"^^xsd:string)AnnotationAssertion(rdfs:comment <to> "the destination node of the link."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000223> "watt-hour"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <priority> <>)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#Point> <wgs84_pos#>)AnnotationAssertion(rdfs:comment <AccessPoint> "a wireless access point, or more generally just access point (AP), is a networking hardware device that allows a Wi-Fi/Li-Fi device to connect to a wired network. The AP usually connects to a router (via a wired network) as a standalone device, but it can also be an integral component of the router itself. An AP is differentiated from a hotspot, which is the physical location where Wi-Fi access to a WLAN is available."^^xsd:string)AnnotationAssertion(rdfs:comment <hasUnits> "the unit of an observation or measurement."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <firstName> <>)AnnotationAssertion(rdfs:isDefinedBy <hasTxpower> <>)AnnotationAssertion(rdfs:comment <SatelliteRelayStation> "An artificial satellite, that relays and amplifies radio telecommunications signals via a transponder; it creates a communication channel between a source transmitter and a receiver at different locations on Earth. Communications satellites are used for television, telephone, radio, internet, and military applications."^^xsd:string)AnnotationAssertion(rdfs:comment <wgs84_pos#alt> "the altitude of a spartial thing, i.e., a point."^^xsd:string)AnnotationAssertion(rdfs:comment <hasGainofOpticalFilter> "Gain of optical filter on LiFi access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasInterfaceName> <>)AnnotationAssertion(rdfs:comment <hasErrorCode> "the error code of a service."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <idleTimeout> <>)AnnotationAssertion(rdfs:isDefinedBy <hasServiceStartTime> <>)AnnotationAssertion(rdfs:isDefinedBy <hasGainOfConcentrator> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000032> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <hasUserID> <>)AnnotationAssertion(rdfs:comment <nwProtocol> "network protocol. The nw_proto property of a flow."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasOpticalTransmittedPower> <>)AnnotationAssertion(rdfs:isDefinedBy <hasLiFiAccessPointProperty> <>)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#location> <wgs84_pos#>)AnnotationAssertion(rdfs:isDefinedBy <cookie> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000233> <uo.owl>)AnnotationAssertion(rdfs:comment <wgs84_pos#Point> "The relation between something and the point, 
 or other geometrical thing in space, where it is.  For example, the realtionship between
 a radio tower and a Point with a given lat and long.
 Or a relationship between a park and its outline as a closed arc of points, or a road and
 its location as a arc (a sequence of points).
 Clearly in practice there will be limit to the accuracy of any such statement, but one would expect
 an accuracy appropriate for the size of the object and uses such as mapping ."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasAssociatedStations> <>)AnnotationAssertion(rdfs:comment <dlDst> "the Ethernet destination address of the flow. It should be an MAC address, with 6 pairs of hexadecimal digits."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000332> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000003> <uo.owl>)AnnotationAssertion(rdfs:comment <hasRadianceAngle> "the radiance angle of the light ray transmitted from LED on LiFi access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#long> <wgs84_pos#>)AnnotationAssertion(rdfs:isDefinedBy <isUP> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000094> <uo.owl>)AnnotationAssertion(rdfs:comment <gender> "the gender of a user, reused from foaf"^^xsd:string)AnnotationAssertion(rdfs:comment <WiFiAssociation> "the electromagnetic wave carring modulated signal between LTE base station, or eNodeB, and user equipment"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <isIn> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0010008> <uo.owl>)AnnotationAssertion(rdfs:comment <hasHalfIntensityAngle> "The angle of half intensity of the LED light transmiting visible light signal in a LiFi access point. 

A fixed value. It is the angle where the radiated intensity will be half as intense as it would be at 0 degrees, or pointing straight ahead.

Factors that contribute to the angle of half intensity include the amount of diffusing material in the epoxy, the shape of the reflector cup which surrounds the LED chip, the shape of the LED lens, the distance from the LED to the tip of the lens, and the type of emitter chip.

The most common value is Pi/3."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000017> "micrometer"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000034> <uo.owl>)AnnotationAssertion(rdfs:comment <nwTos> "network type of service. the nw_tos property of a flow. It should be a decimal number with the value between 0-255."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasRadianceAngle> <>)AnnotationAssertion(rdfs:comment <BaseStation> "a \"land station in the land mobile service.\" -- according to the International Telecommunication Union's (ITU) Radio Regulations (RR).

it is a transceiver connecting a number of other devices to one another and/or to a wider area. In LTE, it is also known as eNodeB."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#SpartialThing> <wgs84_pos#>)AnnotationAssertion(rdfs:label <UO_0000235> "megabyte"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#long> "the longitude of a spartial thing, i.e., a point."^^xsd:string)AnnotationAssertion(rdfs:comment <WiredLink> "wired link through twisted cable, optical fiber, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <hasOpticalTransmittedPower> "the transmitted power of the LED on the LiFi access point"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <ObervationAndMeasurement> <sensordata.owl>)AnnotationAssertion(rdfs:label <UO_0000233> "byte"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000114> "watt"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000235> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <flags> <>)AnnotationAssertion(rdfs:comment <WiFiAccessPoint> "An access point in a WiFi network"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000035> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000106> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <range> <>)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#lat> "the latitude of a point"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000016> "millimeter"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <wgs84_pos#lat> <wgs84_pos#>)AnnotationAssertion(rdfs:isDefinedBy <hasErrorCode> <>)AnnotationAssertion(rdfs:label <UO_0000332> "terabyte"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasServiceType> <>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000325> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <hasHalfIntensityAngle> <>)AnnotationAssertion(rdfs:isDefinedBy <hasJoinDate> <>)AnnotationAssertion(rdfs:label <UO_0000003> "time unit"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <gender> <>)AnnotationAssertion(rdfs:comment <Device> "represent all the devices in the physical infrastructure of telecommunciation system. 

According to its user, could be divided into UserDevice and SystemDevice."^^xsd:string)AnnotationAssertion(rdfs:comment <hasStandardDeviation> "After multiple round trip time tested on a link, the deviation of these test results."^^xsd:string)AnnotationAssertion(rdfs:comment <hasIP> "the IP address of the interface."^^xsd:string)AnnotationAssertion(rdfs:comment <Service> "a communication service, e.g., voice, video, file uploading/downloading, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <UO_0000017> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <UO_0000060> <uo.owl>)AnnotationAssertion(rdfs:isDefinedBy <apsInRange> <>)AnnotationAssertion(rdfs:comment <LiFiAssociation> "the visiable light carring modulated signals in Li-Fi network. Transmited and received by LiFi user equipment and LiFi access point."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <stationsInRange> <>)AnnotationAssertion(rdfs:comment <PhysicalInfrastructure> "Describe all the physical resources in a telecommunication network system, which is divided into three main modules, namely, device, interface, link. 

Please be reminded the electromagnetic wave (which is the links of all wireless communication netwoks), even if it is invisable, physically exists. Thus, it is also described in the subclass of \"net;PhysicalInfrastructure\"."^^xsd:string)AnnotationAssertion(rdfs:comment <Host> "A host is a computer or other device connected to a computer network. It is a network node that is assigned a network address."^^xsd:string)AnnotationAssertion(rdfs:comment <hasInterfaceName> "the port number of an interface"^^xsd:string)AnnotationAssertion(rdfs:comment <Action> "the action of a flow defined in OpenFlow protocol"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <hasServiceStatus> <>)AnnotationAssertion(rdfs:comment <hasIncidentAngle> "The angle of incidence of the LED receiver on LiFi user equipment, which is the angle between the visiable light ray incident on a surface and the line perpendicular to the surface at the point of incidence, called the normal."^^xsd:string)AnnotationAssertion(rdfs:comment <ssid> "in wireless networks, the ssid of the network this device belongs to."^^xsd:string)AnnotationAssertion(rdfs:comment <WirelessAssociation> "the electromeganetic radio transmiting through wireless channels in wireless network, carring communication data. Depend on its frequency, it could be visiable light, micro waves, radio waves."^^xsd:string)AnnotationAssertion(rdfs:comment <lastName> "the last name of a person.
Reused from foaf"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000094> "meter per second"^^xsd:string)AnnotationAssertion(rdfs:comment <hasPacketLoss> "the packet loss rate of a link, usually in percentage."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000032> "hour"^^xsd:string)AnnotationAssertion(rdfs:comment <hasAntennaGain> "the gain of an antenna on the wireless interface."^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000060> "speed/velocity unit"^^xsd:string)AnnotationAssertion(rdfs:label <UO_0000106> "hertz"^^xsd:string)
AnnotationAssertion(<Interactor_Role_Interaction.owl#reference> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "http://odps.sourceforge.net"@en)AnnotationAssertion(rdfs:label <interaction3.owl#phosphorilation> "phosphorilation"^^xsd:string)AnnotationAssertion(<Interactor_Role_Interaction.owl#classification> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "Domain Modelling"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#structure> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "../img/Interactor_Role_Interaction_abstract.png"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#result> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "The participation events and the role with which interactors participate in concrete interactions are decoupled. Also, each interaction has a given set of interactors and not more"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#implementation> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "The three object properties must be created first (HasRole, RoleInInteraction and HasParticipant). Each interaction bears a closure, so apart of an axiom [HasParticipant exactly 1 InteractorX], an axiom of the type [HasParticipant only (Interactor1 or InteractorN)] should be used. For each interactor, add an axiom of the type [HasRole some (Role and RoleInInteraction Interaction), so queries can be decomposed for roles or participation in interactions, or participations in interactions with certain roles"@en)AnnotationAssertion(rdfs:label <interaction3.owl#physical_interaction> "physical_interaction"^^xsd:string)AnnotationAssertion(<Interactor_Role_Interaction.owl#reference> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> ""@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#motivation> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "Protein Protein Interactions (PPI) are the base for most of the biological processes at a molecular level. For example (search.xhtml?query=BRCA2)"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#additional_information> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "See also the following paper: M. Dumontier. Biological situational modeling: Defining Molecular Roles in Pathways and Reactions. 2008. OWL Experiences and Design (OWLED-EU 2008)"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#name> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "Interactor Role Interaction"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#aim> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "To model different interactions where the interactors can have different roles"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#elements> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "Three object properties are needed: HasRole, RoleInInteraction, and HasParticipant. This ODP has got two aims: close the interactors an interaction can have, and decouple roles from interactions. An interaction is a unique combination of interactors and roles, whereas an interactor can have at the same time many roles and participate in many different interactions (but never with different roles in the same interaction)"@en)AnnotationAssertion(<Interactor_Role_Interaction.owl#sample> <Interactor_Role_Interaction.owl#InteractorRoleInteractionDomain> "../img/Interactor_Role_Interaction_instance.png"@en)
AnnotationAssertion(<Sequence.owl#reference> <Sequence.owl#SequenceDomain> "http://www.cellcycleontology.org"@en)AnnotationAssertion(<Sequence.owl#aim> <Sequence.owl#SequenceDomain> "To model a sequence of events, one after the other"@en)AnnotationAssertion(<Sequence.owl#name> <Sequence.owl#SequenceDomain> "Sequence"@en)AnnotationAssertion(<Sequence.owl#structure> <Sequence.owl#SequenceDomain> "../img/Sequence_abstract.png"@en)AnnotationAssertion(<Sequence.owl#implementation> <Sequence.owl#SequenceDomain> "The sequence is created by adding restrictions in the properties ImmediatelyPrecededBy and ImmediatelyPrecedes for each phase, except in the last one (only ImmediatelyPrecededBy) and the first one (only ImediatelyPrecedes)"@en)AnnotationAssertion(<Sequence.owl#related_ODPs> <Sequence.owl#SequenceDomain> "List ODP, AdaptedSEP ODP"@en)AnnotationAssertion(<Sequence.owl#motivation> <Sequence.owl#SequenceDomain> "In biological knowledge there are events that happen one after the other in a single related sequence, such as the cell cycle. Sometimes the only important thing is what happens after or before a concrete event, without the concrete order of all the events (in that case we would need the List ODP, for example to compare different sequences of events)"@en)AnnotationAssertion(<Sequence.owl#sample> <Sequence.owl#SequenceDomain> "../img/Sequence_instance.png"@en)AnnotationAssertion(<Sequence.owl#classification> <Sequence.owl#SequenceDomain> "Domain Modelling"@en)AnnotationAssertion(rdfs:comment <Sequence.owl#query> "Anything that occurs after G1 (M,G2,S)"^^xsd:string)AnnotationAssertion(rdfs:comment <Sequence.owl#query2> "Right after S, thus only G2"^^xsd:string)AnnotationAssertion(<Sequence.owl#additional_information> <Sequence.owl#SequenceDomain> "in theory only ImmediatelyPrecedes relationships should be asserted and the reasoner should infer the inverse relationship, but it does not work for the superproperty of the inverse. Also, for the inverse to work properly some kind of closure (onlysome) or defined classes are needed"@en)AnnotationAssertion(<Sequence.owl#result> <Sequence.owl#SequenceDomain> "The sequence of events is codified creating an structure that can be queried with queries such as [OccursAt some (PrecededBy some S)], if we want anything that happens after S, or [OccursAt some (ImmediatelyPrecededBy some S)], if we want to know what happens right after S but not later (thus not G2 or M)"@en)AnnotationAssertion(<Sequence.owl#elements> <Sequence.owl#SequenceDomain> "The elements of this ODP are the classes that make up the sequence (in this case the phases of the cell cycle, thus G1, S, G2, M) and the four properties Precedes (transitive), ImmediatelyPrecedes (subproperty of Precedes, functional) PrecededBy (transitive) and ImmediatelyPrecededBy (subproperty of PrecededBy, functional)"@en)
AnnotationAssertion(<List.owl#side_effects> <List.owl#ListDomain> "(i) If very long and complex lists are used there can be a decrease in reasoning performance. (ii) Maintenance of Lists is a very difficult task"@en)AnnotationAssertion(<List.owl#name> <List.owl#ListDomain> "List"@en)AnnotationAssertion(rdfs:comment <List.owl#GeneF> "Promoter > Intron > Terminator"@en)AnnotationAssertion(rdfs:comment <List.owl#AnyGeneSuccesiveExons> "Any gene with two succesive exons"@en)AnnotationAssertion(<List.owl#reference> <List.owl#ListDomain> "Nick Drummond, Alan Rector, Robert Stevens, Georgina Moulton, Matthew Horridge, Hai H. Wang, Julian Seidenberg. Putting OWL in Order: Patterns for Sequences in OWL. OWLed 2006"@en)AnnotationAssertion(<List.owl#reference> <List.owl#ListDomain> "Robert Stevens, Mikel Egana Aranguren, Katy Wolnstencroft, Ulrike Sattler, Nick Drummond and Mathew Horridge. Using OWL to Model Biological Knowledge. International Journal of Human Computer Studies 2006, 65:7, 583-594"@en)AnnotationAssertion(<List.owl#classification> <List.owl#ListDomain> "Domain Modelling"@en)AnnotationAssertion(<List.owl#aim> <List.owl#ListDomain> "The List is used to model ordered elements, representing the semantics of the order: in this case the ODP will be used to build a gene starting from some elements of the Sequence Ontology: Promoter (SO:0000167), Terminator (SO:0000141), Intron (SO:0000188) and Exon (SO:0000147). For the sake of clarity a minimalist gene is built, with a very simple structure"@en)AnnotationAssertion(rdfs:comment <List.owl#AnyGeneContainingExon> "Any Gene that contatins exons"@en)AnnotationAssertion(<List.owl#sample> <List.owl#ListDomain> "../img/List_instance.png"@en)AnnotationAssertion(rdfs:comment <List.owl#GeneA> "Promoter > Intron > Exon > Intron > Exon > Terminator"@en)AnnotationAssertion(rdfs:comment <List.owl#GeneD> "Promoter > Intron > Exon > Intron"@en)AnnotationAssertion(<List.owl#structure> <List.owl#ListDomain> "../img/List_abstract.png"@en)AnnotationAssertion(rdfs:comment <List.owl#GeneE> "Promoter > Intron > Exon > Exon > Terminator"@en)AnnotationAssertion(<List.owl#elements> <List.owl#ListDomain> "The most important elements are the different classes that can be used to build the List (Promoter, Terminator, Intron and Exon) and the class that it is modelled using the List (in this case Gene). The needed relationships are: Contents (functional), Rest (transitive) and Next (functional and a subproperty of Rest)"@en)AnnotationAssertion(rdfs:comment <List.owl#GeneB> "Promoter > Exon > Intron > Exon > Terminator"@en)AnnotationAssertion(<List.owl#reference> <List.owl#ListDomain> ""@en)AnnotationAssertion(<List.owl#also_known_as> <List.owl#ListDomain> "Linked list"@en)AnnotationAssertion(<List.owl#implementation> <List.owl#ListDomain> "There is a Protege wizard available for easily creating lists"@en)AnnotationAssertion(rdfs:comment <List.owl#AnyGeneEndingTerminator> "Any gene that ends with a Terminator."@en)AnnotationAssertion(<List.owl#additional_information> <List.owl#ListDomain> "The Linked List is one of the oldest and most widely used data structures in computer science; plenty of programming languages offer primitives similar to it. The Circularly Linked List is a List that ends up with the beggining of itself, creating a circle. The application of the Circularly Linked List in OWL DL has not been investigated yet. The wikipedia entry offers plenty of information on the subject: Linked_list"@en)AnnotationAssertion(<List.owl#result> <List.owl#ListDomain> "The result is the class Gene, with the elements in the proper order. Apart of being an efficient way of modelling ordered elements, Lists offer the possibility of creating a powerful classyfing system: Lists of plenty of kinds can be defined (e.g. definitions of the following type: any List containing elements A and B, not followed by C and then followed by two D-s) and they will be put in the correct position of the hierarchy of already defined lists. Using that procedure, for example, different protein fingerprints (lists of regular expressions) or different kinds of genes can be defined. The models can be queried, for example, with a given gene defined with a certain ordered combination of introns, exons, promoter and terminator to see in which position of the hierarchy is classified and to which genes does it relate"@en)AnnotationAssertion(rdfs:comment <List.owl#GeneC> "Promoter > Intron > Exon"@en)AnnotationAssertion(<List.owl#motivation> <List.owl#ListDomain> "An ordered group of elements is a very intuitive modelling structure, yet the semantics of such a construct in OWL DL are complex. Biology is full of structures where the order of the elements is vital (e.g. parts of genes). If that order is altered (e.g. a change of the order of introns and exons in a gene) there can be serious damage in biological systems"@en)
AnnotationAssertion(<Adapted_SEP.owl#reference> <Adapted_SEP.owl#AdaptedSEPDomain> ""@en)AnnotationAssertion(<Adapted_SEP.owl#reference> <Adapted_SEP.owl#AdaptedSEPDomain> "Stefan Shultz and Udo Hahn. Part-whole representation and reasoning in formal biomedical ontologies. Artificial Intelligence in Medicine, 34: 179-200, 2005"@en)AnnotationAssertion(<Adapted_SEP.owl#name> <Adapted_SEP.owl#AdaptedSEPDomain> "Adapted SEP"@en)AnnotationAssertion(<Adapted_SEP.owl#reference> <Adapted_SEP.owl#AdaptedSEPDomain> "Julian Seidenberg, Alan Rector. \"Representing transitive propagation in OWL\". ER2006"@en)AnnotationAssertion(<Adapted_SEP.owl#classification> <Adapted_SEP.owl#AdaptedSEPDomain> "Domain Modelling"@en)AnnotationAssertion(<Adapted_SEP.owl#implementation> <Adapted_SEP.owl#AdaptedSEPDomain> "The most important step is to define the class CellularLocationPoleOfGrowth as the location of SiteOfPolarizedGrowth or any of its parts, so the location is propagated to the parts (but it is not propagated in the case of CellCortex)"@en)AnnotationAssertion(<Adapted_SEP.owl#reference> <Adapted_SEP.owl#AdaptedSEPDomain> "Alan L Rector and Sebastian Brandt. Why do it the hard way? The Case for an Expressive Description Logic for SNOMED.  JAMIA (28 August 2008)"@en)AnnotationAssertion(<Adapted_SEP.owl#also_known_as> <Adapted_SEP.owl#AdaptedSEPDomain> "Transitive propagator"@en)AnnotationAssertion(<Adapted_SEP.owl#elements> <Adapted_SEP.owl#AdaptedSEPDomain> "The elements of the partonomy hierarchy are maintained and in this case two new elements are added to represent concrete locations in the cell (CellularLocationPole and CellularLocationPeriphery). The PartOf relationship is maintained (defined as transitive) and in this case a new object property is added to link locations with cellular components, CellularLocationOf"@en)AnnotationAssertion(<Adapted_SEP.owl#structure> <Adapted_SEP.owl#AdaptedSEPDomain> "../img/AdaptedSEP_abstract.png"@en)AnnotationAssertion(<Adapted_SEP.owl#motivation> <Adapted_SEP.owl#AdaptedSEPDomain> "In the biomedical domain the propagation of properties along the partonomy relation is very important. For example, there are cases where the fault of the part should be assumed to be a fault of the whole (an appendix perforation is an intestine perforation) and other cases where it should not be considered like that (appendicitis is not enteritis). The problem of propagating properties along partonomy relates directly to the problem of (for example) overloading PartOf in the Gene Ontology: for example Location, a property that should propagate along (or not) with PartOf , is always implicitly present anywhere there is a PartOf relation. For example Polarisome is PartOf  CellCortex and PartOf SiteOfPolarizedGrowth, inheriting both locations, creating a conflict: polarisome is not located in the whole of the cell cortex, is only located in the cell cortex in the site of polarised growth"@en)AnnotationAssertion(<Adapted_SEP.owl#aim> <Adapted_SEP.owl#AdaptedSEPDomain> "To model selective transitive propagation"@en)AnnotationAssertion(<Adapted_SEP.owl#result> <Adapted_SEP.owl#AdaptedSEPDomain> "The location property CellularLocationOf is propagated along PartOf in a selective way, allowing for a precise and unambiguous definition of the polarisome location. To check the result two classes can be created: PolarisomeLocation [partial CellularLocationOf some Polarisome] and SiteOfPolarisedGrowthLocation [complete cellularLocationOf some (SiteOfPolarisedGrowth and PartOf some SiteOfPolarisedGrowth)]. After reasoning PolarisomeLocation should be a subclass of SiteOfPolarisedGrowthLocation"@en)AnnotationAssertion(<Adapted_SEP.owl#additional_information> <Adapted_SEP.owl#AdaptedSEPDomain> "There have been different proposals in the literature for modelling transitive propagation in the biomedical domain. The approach chosen for this ODP relies on the possibility of creating transitive object properties given by OWL DL. Another approach is the one described by Stefan Shultz and Udo Hahn (see references), which relies in simulating the transitivity by creating SEP triples (Structure - Entity - Part) for each class of the partonomy hierarchy, allowing for selective inheritance of properties"@en)AnnotationAssertion(<Adapted_SEP.owl#sample> <Adapted_SEP.owl#AdaptedSEPDomain> "../img/AdaptedSEP_instance.png"@en)
AnnotationAssertion(<Exception.owl#reference> <Exception.owl#ExceptionDomain> "Robert Stevens, Mikel Egana Aranguren, Katy Wolnstencroft, Ulrike Sattler, Nick Drummond and Mathew Horridge. Using OWL to Model Biological Knowledge. International Journal of Human Computer Studies 2006, 65:7, 583-594"@en)AnnotationAssertion(<Exception.owl#elements> <Exception.owl#ExceptionDomain> "The most important elements are the newly created TypicalEukaryoticCell, TypicalRedBloodCell, AtypicalEukaryoticCell, AtypicalRedBloodCell classes. The rest of the classes are maintained. The most important object property is the discriminating property, in this case, HasNucleus"@en)AnnotationAssertion(rdfs:comment <Exception.owl#ExceptionDomain> "The most important elements are the newly created TypicalEukaryoticCell, TypicalRedBloodCell, AtypicalEukaryoticCell, AtypicalRedBloodCell classes. The rest of the classes are maintained. The most important property is the discriminating property, in this case, hasNucleus"@en)AnnotationAssertion(<Exception.owl#sample> <Exception.owl#ExceptionDomain> "../img/Exception_instance.png"@en)AnnotationAssertion(<Exception.owl#side_effects> <Exception.owl#ExceptionDomain> "If the ODP is used in plenty of different levels of the ontology it can produce too complex and unmanageable ontologies. This type of structure can be very counter-intuitive for biologists"@en)AnnotationAssertion(<Exception.owl#reference> <Exception.owl#ExceptionDomain> ""@en)AnnotationAssertion(<Exception.owl#name> <Exception.owl#ExceptionDomain> "Exception"@en)AnnotationAssertion(<Exception.owl#aim> <Exception.owl#ExceptionDomain> "to model exceptions without breaking the strict class-subclass hierarchy: for example the class MammalianRedBloodCell (with the restriction HasNucleus exactly 0) would be a subclass of EukaryoticCell (with the restriction HasNucleus exactly 1), resulting in an inconsistent ontology. There can be exceptions to the exception in the next level: avian red blood cells do posses a nucleus, thus, they are considered normal eukaryotic cells (they are an exception to the norm that all red blood cells lack a nucleus). So the problem that this ODP solves can rise in different levels"@en)AnnotationAssertion(<Exception.owl#classification> <Exception.owl#ExceptionDomain> "Extension"@en)AnnotationAssertion(<Exception.owl#Result> <Exception.owl#ExceptionDomain> "After reasoning the correct hierarchy is obtained, with the typical/atypical distinction at every level"@en)AnnotationAssertion(<Exception.owl#implementation> <Exception.owl#ExceptionDomain> "Starting from the example ontology described in the Aim section, two disjoint classes are created for typical and atypical elements. The discriminating condition HasNucleus is only stated in the typical subclass. A covering axiom is added to the main class (i.e. EukaryoticCell) to state that all instances must belong to one or the other subclass (TypicalEukaryoticCell or AtypicalEukaryoticCell). A covering axiom is done by creating a equivalent class (a neccesary and sufficient condition) that is the union of the subclasses (In this case TypicalEukaryoticCell and AtypicalEukaryoticCell). The reasoner will infer the whole structure"@en)AnnotationAssertion(<Exception.owl#structure> <Exception.owl#ExceptionDomain> "../img/Exception_abstract.png"@en)AnnotationAssertion(<Exception.owl#motivation> <Exception.owl#ExceptionDomain> "Plenty of areas of knowledge work with defaults or canonical knowledge: biological classifications, for example, state what is the canonical norm and then the exceptions are classified under the norm, even if the classification is inconsistent from the point of view of logic. A clear example can be found in the classification of cells: in canonical biology eukaryotic cells are considered to be cells with a nucleus. Mammalian red blood cells are considered by any biologist as eukaryotic cells, but they lack a nucleus. Thus they are a subclass of eukaryotic cells, but they break the condition for belonging to that class (having a nucleus)"@en)
AnnotationAssertion(<Nary_DataType_Relationship.owl#structure> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "../img/Nary_DataType_Relationship_abstract.png"@en)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#has_boiling_point> "has_boiling_point"^^xsd:string)AnnotationAssertion(<Nary_DataType_Relationship.owl#motivation> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "Numerical values can have different aspects. For example, a boiling point has a temperature value, a pressure, etc. This simple ODP should be used to model those cases"@en)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#number_value> "number value"^^xsd:string)AnnotationAssertion(<Nary_DataType_Relationship.owl#implementation> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "The first step is to choose the datatype value that needs to be reified and create a class for it (e.g. StandardWaterBoilingPoint), then add a restriction (e.g. [Water HasBoilingPoint some StandardWaterBoilingPoint]) and all the neccesary datatype properties and restrictions to the reified class (e.g. [StandardWaterBoilingPoint partial HasUnit value celsius], [StandardWaterBoilingPoint partial  HasValue value 100], etc.)"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#result> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "After the reification a value with different aspects is represented in the ontology"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#reference> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "ontologies.php"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#related_ODPs> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "Nary Relationship"@en)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#pressure> "pressure"^^xsd:string)AnnotationAssertion(<Nary_DataType_Relationship.owl#reference> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "Bijan Parsia and Michael Smith. Quantities in OWL. OWLed 2008 EU"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#aim> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "To represent a datatype value with more than one aspect"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#sample> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "../img/Nary_DataType_Relationship_instance.png"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#elements> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "The original value is reified (decomposed) in all the neccesary data type properties and values"@en)AnnotationAssertion(<Nary_DataType_Relationship.owl#name> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "Nary DataType Relationship"@en)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#standard_water_boiling_point> "standard_water_boiling_point"^^xsd:string)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#water> "water"^^xsd:string)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#unit> "unit"^^xsd:string)AnnotationAssertion(<Nary_DataType_Relationship.owl#classification> <Nary_DataType_Relationship.owl#NaryDataTypeRelationshipDomain> "Extension"@en)AnnotationAssertion(rdfs:label <Nary_DataType_Relationship.owl#point> "point"^^xsd:string)
AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityFeatureValueDomain> "Mikel Egana, Alan Rector, Robert Stevens and Erick Antezana. Applying Ontology Design Patterns in bio-ontologies. EKAW 2008. LNCS 5268, pp. 7-16, 2008"@en)AnnotationAssertion(<Entity_Quality.owl#aim> <Entity_Quality.owl#EntityFeatureValueDomain> "To model features with the simplest structure possible"@en)AnnotationAssertion(rdfs:label <Entity_Quality.owl#peripheral> "basal"^^xsd:string)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityFeatureValueDomain> "A. Gangemi, N. Guarino, C. Masolo, A. Oltramari and L. Schneider. Sweetening
ontologies with dolce. In: LNCS, EKAW. (2002) 166-182"@en)AnnotationAssertion(<Entity_Quality.owl#motivation> <Entity_Quality.owl#EntityFeatureValueDomain> "This ODP is used to represent modifiers with multiple aspects, thus features (e.g. colour with a certain brightness and saturation)"@en)AnnotationAssertion(<Entity_Quality.owl#elements> <Entity_Quality.owl#EntityFeatureValueDomain> "The most important elements are the object properties (one for each aspect), the feature, and the values of the aspects"@en)AnnotationAssertion(<Entity_Quality.owl#result> <Entity_Quality.owl#EntityFeatureValueDomain> "The entities, que features of those entities and the aspects of the features are properly separated"@en)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityFeatureValueDomain> "Alan Rector (Personal Communication)"@en)AnnotationAssertion(<Entity_Quality.owl#classification> <Entity_Quality.owl#EntityFeatureValueDomain> "Good Practice"@en)AnnotationAssertion(<Entity_Quality.owl#side_effects> <Entity_Quality.owl#EntityFeatureValueDomain> "Although this ODP can obviously handle multi aspect qualities, it is difficult to author because of the amount of entities that need to be added"@en)AnnotationAssertion(<Entity_Quality.owl#implementation> <Entity_Quality.owl#EntityFeatureValueDomain> "For each aspect of the feature, an object property and a value partition should be created. For each of them, the domain should be the class Feature and the range the aspect value. The feature is really an Nary relationship ODP, and it is linked to each aspect by existential restrictions. The entity is linked to the feature with a Qualified Cardinality Restriction (QCR) of exactly one"@en)AnnotationAssertion(<Entity_Quality.owl#sample> <Entity_Quality.owl#EntityFeatureValueDomain> "../img/EntityFeatureValue_instance.png"@en)AnnotationAssertion(<Entity_Quality.owl#structure> <Entity_Quality.owl#EntityFeatureValueDomain> "../img/EntityFeatureValue_abstract.png"@en)AnnotationAssertion(<Entity_Quality.owl#additional_information> <Entity_Quality.owl#EntityFeatureValueDomain> "See also the Entity-Quality ODP and the Entity-Property-Value ODP"@en)AnnotationAssertion(<Entity_Quality.owl#name> <Entity_Quality.owl#EntityFeatureValueDomain> "Entity-Feature-Value"@en)
AnnotationAssertion(<Selector.owl#sample> <Selector.owl#SelectorDomain> "../img/Selector_instance.png"@en)AnnotationAssertion(<Selector.owl#reference> <Selector.owl#SelectorDomain> "Alan Rector (Personal Communication)"@en)AnnotationAssertion(<Selector.owl#motivation> <Selector.owl#SelectorDomain> "Selectors are widely used in the biomedical domain, especially in the realm of anatomy. A selector is a modifier that can be used to select between identical entities, e.g. right and left hand. Selectors are usually associated with simmetry (left-right,anterior-posterior,lateral-medial) and sometimes hard coded in ontologies, that is, for example left hand and right hand are introduced as subclasses of hand, which adds an unecessary amount of classes. This ODP avoids such proliferation of classes"@en)AnnotationAssertion(<Selector.owl#aim> <Selector.owl#SelectorDomain> "To recreate selectors, that is refining entities that can be used to choose between to alternatives: for example, right or left hand"@en)AnnotationAssertion(<Selector.owl#additional_information> <Selector.owl#SelectorDomain> "See also Entity-Feature-Value, Entity-Property-Value and Entity-Quality"@en)AnnotationAssertion(rdfs:comment <Selector.owl#Query> "burn and affects some (Hand and has_laterality some Right)"@en)AnnotationAssertion(<Selector.owl#elements> <Selector.owl#SelectorDomain> "The main element is the selector class, be it Laterality (covered by Left and Right), AnteriorPosteriorSelector (covered by Anterior and Posterior), etc. A functional object property, e.g. HasLaterality, is used to add a selector to the classes of the domain hierarchy (e.g. hand can be left or right)"@en)AnnotationAssertion(<Selector.owl#implementation> <Selector.owl#SelectorDomain> "Usually this ODP is implemented in already existing ontologies where selectors are implicit. For example, in the FMA ontology, the class Hand has the subclasses LeftHand and RightHand. Using this ODP, the classes LeftHand and RightHand can be deleted, and the class Hand is linked to the class Laterality via an existential restriction on the HasLaterality property"@en)AnnotationAssertion(<Selector.owl#structure> <Selector.owl#SelectorDomain> "../img/Selector_abstract.png"@en)AnnotationAssertion(<Selector.owl#side_effects> <Selector.owl#SelectorDomain> "Depending on the selection procedure, information could be lost when deleting the subclasses (e.g. RightHand), as they can have further subclasses or interesting axioms"@en)AnnotationAssertion(<Selector.owl#classification> <Selector.owl#SelectorDomain> "Good Practice"@en)AnnotationAssertion(<Selector.owl#reference> <Selector.owl#SelectorDomain> "Eleni Mikroyannidi. Abstracting and generalising a large anatomy ontology. MSc Dissertation, Computer Science, Uni. of Manchester. 2008"@en)AnnotationAssertion(<Selector.owl#name> <Selector.owl#SelectorDomain> "Selector"@en)AnnotationAssertion(<Selector.owl#result> <Selector.owl#SelectorDomain> "The original ontology is considerably reduced in size. If we want to refer the original entities, we can do it by reusing the HasSelector property. For example, if we want to define a burn on the right hand, we can use the following expression: [Burn and Affects some (Hand and HasLaterality some Right)]"@en)
AnnotationAssertion(<Normalisation.owl#reference> <Normalisation.owl#NormalisationDomain> "Alan L. Rector, Chris Wroe, Jeremy Rogers and Angus Roberts. Untangling Taxonomies and Relationships: personal and Practical Problems in Loosely Coupled Development of Large Ontologies. K-CAP 2001"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191147032377673000> "Module3"^^xsd:string)AnnotationAssertion(<Normalisation.owl#also_known_as> <Normalisation.owl#NormalisationDomain> "Untangling"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191146966572169000> "Value3"^^xsd:string)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085095527591000> "Value"^^xsd:string)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085109926659000> "Value2"^^xsd:string)AnnotationAssertion(<Normalisation.owl#result> <Normalisation.owl#NormalisationDomain> "The ontology gets untangled and becomes a collection of neat modules. The rest of the semantics are given by restrictions pointing to the modules, and the reasoner maintains the structure, avoding error-prone human maintenance of the polyhierarchy"@en)AnnotationAssertion(<Normalisation.owl#sample> <Normalisation.owl#NormalisationDomain> "../img/Normalisation_instance.png"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085054406596000> "PrimitiveAxis"^^xsd:string)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191147080587936000> "Primitive4"^^xsd:string)AnnotationAssertion(<Normalisation.owl#aim> <Normalisation.owl#NormalisationDomain> "To untangle a polyhierarchy, coding the subsumption relationships using restrictions rather than class-subclass relationships. The application example for this ODP is adapted from the Cell Type Ontology. In the example, the subsumption relationships that already are in the Cell Type Ontology are inferred by the reasoner instead of hard-coded. The term Neutrophil is used as an example class to show how a class can relate to different modules"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085042783001000> "Module2"^^xsd:string)AnnotationAssertion(<Normalisation.owl#name> <Normalisation.owl#NormalisationDomain> "Normalisation"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085072406442000> "Primitive1"^^xsd:string)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191084986079895000> "NormalisationDomainSample"^^xsd:string)AnnotationAssertion(<Normalisation.owl#reference> <Normalisation.owl#NormalisationDomain> ""@en)AnnotationAssertion(<Normalisation.owl#reference> <Normalisation.owl#NormalisationDomain> "Alan L. Rector. Modularisation of Domain Ontologies Implemented in Description Logics and related formalisms including OWL. K-CAP 2003"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191146945696240000> "Primitive3"^^xsd:string)AnnotationAssertion(<Normalisation.owl#implementation> <Normalisation.owl#NormalisationDomain> "Identify the modules: group the classes. Create the modules, maintaining only one parent for any given primitive class and making primitive siblings disjoint. Redefine the classes (or define the newly added classes) according to the conditions for belonging to each module. Protege includes a wizard, the restrictions matrix, that helps in the process"@en)AnnotationAssertion(<Normalisation.owl#classification> <Normalisation.owl#NormalisationDomain> "Good Practice"@en)AnnotationAssertion(<Normalisation.owl#motivation> <Normalisation.owl#NormalisationDomain> "There are ontologies where a given class can have plenty of superclasses, building a polyhierarchy. If all those subsumption relationships are directly stated by the ontology maintainer, two main problems rise: (i) the ontology becomes very difficult to maintain: whenever a subsumption must be deleted (because a class has changed) or created (because a new class has been created) it has to be done by hand; in a polyhierarchy the process becomes very inefficient and error-prone. (ii) the semantics are implicitly stated, not explicitly: any other ontologist or reasoner only knows that a class is a subclass of its superclasses, without knowing why"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#ObjectProperty1191085001326636000> "property"^^xsd:string)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085081735403000> "Primitive2"^^xsd:string)AnnotationAssertion(<Normalisation.owl#elements> <Normalisation.owl#NormalisationDomain> "The original classes of the ontology are divided in different axes. The conditions for each subsumption relationship are encoded as restrictions (e.g. [PerformsFunction some Defense]) that will relate the different modules"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085104383179000> "Value1"^^xsd:string)AnnotationAssertion(<Normalisation.owl#structure> <Normalisation.owl#NormalisationDomain> "../img/Normalisation_abstract.png"@en)AnnotationAssertion(rdfs:label <Normalisation.owl#Class1191085032501114000> "Module1"^^xsd:string)
AnnotationAssertion(<Upper_Level_Ontology.owl#sample> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "../img/Upper_Level_Ontology_instance.png"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#name> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "Upper Level Ontology"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#reference> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "Barry Smith et al. A Strategy for Improving and Integrating Biomedical Ontologies. AMIA 2005"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#side_effects> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "The ontology is committed to a concrete view of the knowledge domain (given by the Upper Level Ontology), and therefore the use and implantation of Upper Level Ontologies is very controversial"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#result> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "By endorsing to a given Upper Level Ontology when building a domain ontology the ontologists makes the integration of the ontology with other ontologies a much easier process. Besides, the ontology becomes a cleaner model with different modules"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#motivation> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "Different ontologies of a given domain share very general types of concepts, like Substance, Modifier, etc. These types of concepts are grounded in philosophical criteria, like distinctions between Occurents and Continuants. The different domain ontologies can thus be integrated in one Upper Level Ontology, each ontology having different relationships pointing to the concepts of the Upper Level Ontology. The Upper Level Ontology used here as an example is the Ontology of Biomedical Reality (OBR)"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#aim> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "To create an ontology that can integrate different ontologies in itself"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#structure> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "../img/Upper_Level_Ontology_abstract.png"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#also_known_as> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "Foundational ontology"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#implementation> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "The different hierarchies of primitive classes must be asserted using disjoints"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#reference> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> ""@en)AnnotationAssertion(<Upper_Level_Ontology.owl#classification> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "Good Practice"@en)AnnotationAssertion(<Upper_Level_Ontology.owl#elements> <Upper_Level_Ontology.owl#UpperLevelOntologyDomain> "All the classes that represent a conceptual category"@en)
AnnotationAssertion(<Closure.owl#structure> <Closure.owl#ClosureDomain> "../img/Closure_abstract.png"@en)AnnotationAssertion(<Closure.owl#motivation> <Closure.owl#ClosureDomain> "OWL sometimes is anti-intuitive due to the Open World Assumption. One of the examples of such problem is the fact that plenty of users think that asserting an existential restriction is enough to close a relationship, when in fact a universal restriction is also needed: it is not enough to say that carnivore eats some meat, as that is equivalent to saying that it can eat another things apart of meat"@en)AnnotationAssertion(<Closure.owl#classification> <Closure.owl#ClosureDomain> "Good Practice"@en)AnnotationAssertion(<Closure.owl#implementation> <Closure.owl#ClosureDomain> "The only necessary step is to add an existential restriction and an universal restriction with the same filler"@en)AnnotationAssertion(<Closure.owl#aim> <Closure.owl#ClosureDomain> "Simulate the closed world assumption in a concrete class"@en)AnnotationAssertion(<Closure.owl#name> <Closure.owl#ClosureDomain> "Closure"@en)AnnotationAssertion(<Closure.owl#result> <Closure.owl#ClosureDomain> "The closure axiom allows to close the world and express that something has got a property and only that property. For example, following the example, without the closure (without the universal restriction) carnivore and herbivore would appear as subclasses of omnivore. However, with the closure axiom, they do not"@en)AnnotationAssertion(<Closure.owl#sample> <Closure.owl#ClosureDomain> "../img/Closure_instance.png"@en)AnnotationAssertion(<Closure.owl#reference> <Closure.owl#ClosureDomain> "Alan Rector, Nick Drummond, Matthew Horridge, Jeremy Rogers, Holger Knublauch,  Robert Stevens, Hai Wang, Chris Wroe. OWL Pizzas: Practical Experience of Teaching OWL-DL: Common Errors and Common Patterns. In Proceedings of  the European Conference on Knowledge Acquistion, 2004. LNCS- LNAI 3257, Springer-Verlag.pp 63-81"@en)AnnotationAssertion(<Closure.owl#reference> <Closure.owl#ClosureDomain> "Explicit Knowledge Engineering Patterns with Macros. Denny Vrandecic.
In Proceedings of the Ontology Patterns for the Semantic Web Workshop (ISWC 2005)"@en)AnnotationAssertion(<Closure.owl#elements> <Closure.owl#ClosureDomain> "The only element to take into account is the object property that will be used to produce the closure"@en)
AnnotationAssertion(<Entity_Quality.owl#elements> <Entity_Quality.owl#EntityQualityDomain> "The core of this ODP is formed by the qualities, placed in a single hierarchy (the qualities are disjoint and the superclass is covered by them, like in the Value Partition ODP). Entities are linked to qualities by an object property, and a Qualifed Cardinality Restriction is used to express whether the quality is intrisic (exactly 1) or accidental (max 1). Also, qualities are limited to the entities to which they apply by an universal restriction (e.g. mitochondria do not regulate mitosis)"@en)AnnotationAssertion(<Entity_Quality.owl#motivation> <Entity_Quality.owl#EntityQualityDomain> "Qualities modify independent entities (e.g. position, colour, etc.) and thus they are dependent entities"@en)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityQualityDomain> "Alan Rector (Personal Communication)"@en)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityQualityDomain> "Mikel Egana, Alan Rector, Robert Stevens and Erick Antezana. Applying Ontology Design Patterns in bio-ontologies. EKAW 2008. LNCS 5268, pp. 7-16, 2008"^^xsd:string)AnnotationAssertion(<Entity_Quality.owl#additional_information> <Entity_Quality.owl#EntityQualityDomain> "See also Entity-Feature-Value and Entity-Property-Value"@en)AnnotationAssertion(<Entity_Quality.owl#side_effects> <Entity_Quality.owl#EntityQualityDomain> "it is very difficult to add sub-qualities. Cannot handle multi-aspect qualities"@en)AnnotationAssertion(<Entity_Quality.owl#sample> <Entity_Quality.owl#EntityQualityDomain> "../img/EntityQuality_instance.png"@en)AnnotationAssertion(rdfs:label <Entity_Quality.owl#basal> "basal"^^xsd:string)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityQualityDomain> "P. Grenon, B. Smith, L. Goldberg. Biodynamic ontology: Applying BFO in the biomedical domain. In Pisanelli, D.M., ed.: Ontologies in Medicine, IOS Press
(2004) 20-38"@en)AnnotationAssertion(<Entity_Quality.owl#aim> <Entity_Quality.owl#EntityQualityDomain> "To model qualities without relying in a proliferation of object properties, as in the Entity-Property-Quality ODP"@en)AnnotationAssertion(<Entity_Quality.owl#name> <Entity_Quality.owl#EntityQualityDomain> "Entity-Quality"@en)AnnotationAssertion(<Entity_Quality.owl#result> <Entity_Quality.owl#EntityQualityDomain> "The entities and the qualities of those entities are properly separated, and which qualities apply to which entities is also expressed"@en)AnnotationAssertion(<Entity_Quality.owl#classification> <Entity_Quality.owl#EntityQualityDomain> "Good Practice"@en)AnnotationAssertion(<Entity_Quality.owl#implementation> <Entity_Quality.owl#EntityQualityDomain> "The first step is to create the qualities hierarchy, in the same way as the Value Partition ODP. Create the object property to link entities to qualities. Add the restriction [QualityCategory inv (HasQuality) only Entity] (this restricts the qualities to the entity). Add the restriction [EntityCategory HasQuality max 1 QualityCategory] or [EntityCategory HasQuality exactly 1 QualityCategory] (this restricts the entities to the qualities, max 1 in the case of accidental qualities and exactly 1 in the case of intrinsic qualities)"@en)AnnotationAssertion(<Entity_Quality.owl#structure> <Entity_Quality.owl#EntityQualityDomain> "../img/EntityQuality_abstract.png"@en)
AnnotationAssertion(<Value_Partition.owl#result> <Value_Partition.owl#ValuePartitionDomain> "The attributes and the elements that are described or modified by the attributes get untangled: whenever a new element enters the domain (e.g. another regulation phenomenon) it is only a matter of adding a restriction pointing to the pertinent Value Partition class. The values that can be given to a certain attribute are constrained, enforcing a better modelling"@en)AnnotationAssertion(<Value_Partition.owl#reference> <Value_Partition.owl#ValuePartitionDomain> "swbp-specified-values"@en)AnnotationAssertion(<Value_Partition.owl#name> <Value_Partition.owl#ValuePartitionDomain> "Value Partition"@en)AnnotationAssertion(<Value_Partition.owl#structure> <Value_Partition.owl#ValuePartitionDomain> "../img/ValuePartition_abstract.png"@en)AnnotationAssertion(<Value_Partition.owl#reference> <Value_Partition.owl#ValuePartitionDomain> ""@en)AnnotationAssertion(<Value_Partition.owl#classification> <Value_Partition.owl#ValuePartitionDomain> "Good Practice"@en)AnnotationAssertion(<Value_Partition.owl#motivation> <Value_Partition.owl#ValuePartitionDomain> "Reality is full of attributes of elements. For example, a person can be defined as being short, medium or tall, and the attribute height can just get those values. Height is said to be covered or exhausted by those values; the possible heights are only those three. Biology is full of such situations: metabolism can only be anabolism or catabolism, membrane transport can only be uniport, sinport or antiport, regulation is always positive, negative, and so forth"@en)AnnotationAssertion(<Value_Partition.owl#sample> <Value_Partition.owl#ValuePartitionDomain> "../img/ValuePartition_instance.png"@en)AnnotationAssertion(<Value_Partition.owl#aim> <Value_Partition.owl#ValuePartitionDomain> "To model values of attributes. In this example we model biological regulation, being negative or positive. PositiveRegulationOfCellKilling, from GO, is linked to the appropriate value"@en)AnnotationAssertion(<Value_Partition.owl#also_known_as> <Value_Partition.owl#ValuePartitionDomain> "Enumeration, if it is built using individuals instead of classes"@en)AnnotationAssertion(<Value_Partition.owl#elements> <Value_Partition.owl#ValuePartitionDomain> "The main elements are the classes that make up the Value Partition itself: a class for the attribute and the subclasses for the values. In this case, Regulation, Positive, and Negative, respectively. The most important relationship is the one that links each element of the knowledge domain with the values of the Value Partition. In this case, IsRegulationOfType (functional)"@en)AnnotationAssertion(<Value_Partition.owl#implementation> <Value_Partition.owl#ValuePartitionDomain> "Identify the attributes every element must be described with. For each attribute, create a class under Modifier (or the pertinent upper level distinction that it is used in the ontology). In each attribute class create a subclass for every value and make them disjoint. Create a covering axiom defining the attribute class. Create the restrictions pointing to the values of the Value Partition"@en)AnnotationAssertion(<Value_Partition.owl#additional_information> <Value_Partition.owl#ValuePartitionDomain> "The Value Partition built with classes offers an advantage over the Enumeration (a Value Partition built with individuals): new subpartitions can be built for each of the value classes (e.g. very tall)"@en)
AnnotationAssertion(<Entity_Quality.owl#implementation> <Entity_Quality.owl#EntityPropertyQualityDomain> "The first step is to create the qualities hierarchy, in the same way as the Value Partition ODP. Create the functional object property to link entities to qualities, adding the entities as domain and quality as range. Link entities to qualities by existential restrictions"@en)AnnotationAssertion(<Entity_Quality.owl#name> <Entity_Quality.owl#EntityPropertyQualityDomain> "Entity-Property-Quality"@en)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityPropertyQualityDomain> "Alan Rector (Personal Communication)"@en)AnnotationAssertion(<Entity_Quality.owl#sample> <Entity_Quality.owl#EntityPropertyQualityDomain> "../img/EntityPropertyQuality_instance.png"@en)AnnotationAssertion(<Entity_Quality.owl#reference> <Entity_Quality.owl#EntityPropertyQualityDomain> "Mikel Egana, Alan Rector, Robert Stevens and Erick Antezana. Applying Ontology Design Patterns in bio-ontologies. EKAW 2008. LNCS 5268, pp. 7-16, 2008"@en)AnnotationAssertion(<Entity_Quality.owl#additional_information> <Entity_Quality.owl#EntityPropertyQualityDomain> "See also Entity-Feature-Value ODP and Entity-Quality ODP"@en)AnnotationAssertion(rdfs:label <Entity_Quality.owl#basal> "basal"^^xsd:string)AnnotationAssertion(<Entity_Quality.owl#elements> <Entity_Quality.owl#EntityPropertyQualityDomain> "The core of this ODP is formed by the qualities, placed in a single hierarchy (the qualities are disjoint and the superclass is covered by them, like in the Value Partition ODP). Entities are linked to qualities by a functional object property whose domain and range are the entities and the qualities, respectively"@en)AnnotationAssertion(<Entity_Quality.owl#motivation> <Entity_Quality.owl#EntityPropertyQualityDomain> "Qualities (modifiers) are refining entities, thus refine or modify the description of another (independent) entity. They are very important in many domains. They should not be confused with selectors (e.g. left hand), although both modifiers and selectors are refining entities"@en)AnnotationAssertion(<Entity_Quality.owl#structure> <Entity_Quality.owl#EntityPropertyQualityDomain> "../img/EntityPropertyQuality_abstract.png"@en)AnnotationAssertion(<Entity_Quality.owl#aim> <Entity_Quality.owl#EntityPropertyQualityDomain> "To model qualities of independent entities (e.g. position, colour, ...)"@en)AnnotationAssertion(<Entity_Quality.owl#result> <Entity_Quality.owl#EntityPropertyQualityDomain> "The qualities that modify independent entities are modelled, and which qualities apply to which entities is defined"@en)AnnotationAssertion(<Entity_Quality.owl#side_effects> <Entity_Quality.owl#EntityPropertyQualityDomain> "Proliferation of object properties (one for each quality). This ODP Cannot handle multi-aspect qualities (features)"@en)AnnotationAssertion(<Entity_Quality.owl#classification> <Entity_Quality.owl#EntityPropertyQualityDomain> "Good Practice"@en)
AnnotationAssertion(<DefinedClass_Description.owl#result> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "The If-Then rule is represented in the ontology and can be used, for example, when adding new classes and performing reasoning: if a class fulfill the If condition, it will have also the Then attribute"@en)AnnotationAssertion(<DefinedClass_Description.owl#structure> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "../img/DefinedClass_Description_abstract.png"@en)AnnotationAssertion(<DefinedClass_Description.owl#classification> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "Good Practice"@en)AnnotationAssertion(<DefinedClass_Description.owl#name> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "Defined Class Description"@en)AnnotationAssertion(<DefinedClass_Description.owl#reference> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "Alan Rector, Nick Drummond, Matthew Horridge, Jeremy Rogers, Holger Knublauch,  Robert Stevens, Hai Wang, Chris Wroe. OWL Pizzas: Practical Experience of Teaching OWL-DL: Common Errors and Common Patterns. In Proceedings of  the European Conference on Knowledge Acquistion, 2004. LNCS- LNAI 3257, Springer-Verlag.pp 63-81"@en)AnnotationAssertion(<DefinedClass_Description.owl#aim> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "To simulate an If-Then of the type: if something fullfills certain conditions, it should have a further given attribute"@en)AnnotationAssertion(<DefinedClass_Description.owl#elements> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "the important elements are the class that is being used to simulate the rule and the properties that are used in the condition (the equivalent restrictions) and the conclusion (the neccesary restrictions)"@en)AnnotationAssertion(<DefinedClass_Description.owl#motivation> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "If-Then structures are very common and intuitive and this ODP offers the possibility of representing them within OWL DL expressivity"@en)AnnotationAssertion(<DefinedClass_Description.owl#sample> <DefinedClass_Description.owl#DefinedClass_DescriptionDomain> "../img/DefinedClass_Description_instance.png"@en)
AnnotationAssertion(<opla#isNativeTo> <agentrole#providesAgentRole> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <agentrole#TemporalExtent> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#TemporalExtent> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#hasTemporalExtent> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#Agent> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#performsAgentRole> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#isPerformedBy> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <agentrole#Agent> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#AgentRole> "agentrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <agentrole#isProvidedBy> "agentrole"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <bag#Collection> "bag"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <bag#Bag> "bag"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <bag#BagItem> "bag"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <bag#Bag> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <bag#itemOf> "bag"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <bag#Collection> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <bag#po-member> "partonomy"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <event#hasSpatiotemporalExtent> "event"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <event#ParticipantRole> "event"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <event#Event> "event"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <event#providesParticipantRole> "event"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <event#SpatiotemporalExtent> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <event#ParticipantRole> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <event#subEventOf> "event"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <event#SpatiotemporalExtent> "event"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <explicittyping#Type> "explicittyping"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <explicittyping#hasType> "explicittyping"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <identifier#hasIdentifier> "identifier"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <identifier#hasIdentifierType> "identifier"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <identifier#IDType> "identifier"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <identifier#identifierAsText> "identifier"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <identifier#Identifier> "identifier"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <namestub#NameStub> "namestub"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <namestub#nameAsString> "namestub"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <participantrole#TemporalExtent> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#Event> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <participantrole#TemporalExtent> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#Agent> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#hasTemporalExtent> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#isPerformedBy> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#providesParticipantRole> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#isProvidedBy> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#providesAgentRole> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <participantrole#Agent> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#ParticipantRole> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#AgentRole> "participantrole"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <participantrole#performsAgentRole> "participantrole"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <provenance#Agent> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#generatedBy> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#ProvenanceActivity> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <provenance#ProvenanceActivity> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#used> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#performedBy> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#attributedTo> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <provenance#Agent> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#EntityWithProvenance> "provenance"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <provenance#wasDerivedFrom> "provenance"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <quantities#Quantity> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#hasUnit> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#QuantityValue> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#hasQuantityValue> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#Unit> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#QuantityKind> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#hasNumericValue> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <quantities#QuantityKind> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <quantities#hasQuantityKind> "quantities"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <quantities#Unit> "ofExternalType"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <reification#Context> "reification"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <reification#reifiedProperty1> "reification"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <reification#hasContext> "reification"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <reification#ReifiedProperty> "reification"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <reification#reifiedProperty2> "reification"^^rdfs:Literal)
AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isLocationOf> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#SocialObjectAttribute> "Social attribute"@en)AnnotationAssertion(rdfs:label <DUL.owl#classifies> "classifies"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isExecutedIn> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#includesTime> "includes time"@en)AnnotationAssertion(rdfs:label <DUL.owl#DesignedArtifact> "Designed artifact"@en)AnnotationAssertion(rdfs:label <DUL.owl#definesRole> "definisce il ruolo"@it)AnnotationAssertion(rdfs:label <DUL.owl#defines> "defines"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Entity> "Anything: real, possible, or imaginary, which some modeller wants to talk about for some purpose."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isTimeIntervalOf> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#includesEvent> "A relation between situations and events, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included a burning of my fingers)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasPostcondition> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasPrecondition> "ha precondizione"@it)AnnotationAssertion(rdfs:label <DUL.owl#isDefinedIn> "is defined in"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#follows> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasTimeInterval> "has time interval"@en)AnnotationAssertion(rdfs:comment <DUL.owl#realizes> "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasSetting> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasRegion> "ha attributo"@it)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalAttribute> "Physical attribute"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isTaskOf> "A relation between roles and tasks, e.g. 'students have the duty of giving exams' (i.e. the Role 'student' hasTask the Task 'giving exams')."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#NaturalPerson> "A person in the physical commonsense intuition: 'have you seen that person walking down the street?'"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#classifies> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isRegionFor> "is region for"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#usesConcept> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Group> "A CollectiveAgent whose acting agents conceptualize a same SocialRelation ."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#hasParticipant> "ha come partecipante"@it)AnnotationAssertion(rdfs:comment <DUL.owl#follows> "A relation between entities, expressing a 'sequence' schema. 
E.g. 'year 2000 follows 1999', 'preparing coffee' follows 'deciding what coffee to use', 'II World War follows I World War', etc. 
It can be used between tasks, processes or time intervals, and subproperties would fit best in order to distinguish the different uses."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#actsFor> "acts for"@en)AnnotationAssertion(rdfs:label <DUL.owl#SocialObjectAttribute> "Caratteristica sociale"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasIntervalDate> "has interval date"@en)AnnotationAssertion(rdfs:label <DUL.owl#isParticipantIn> "è un partecipante a"@it)AnnotationAssertion(rdfs:comment <DUL.owl#hasRegion> "A relation between entities and regions, e.g. 'the number of wheels of that truck is 12', 'the time of the experiment is August 9th, 2004', 'the whale has been localized at 34 degrees E, 20 degrees S'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isExpandedIn> "è espansa in"@it)AnnotationAssertion(rdfs:label <DUL.owl#Plan> "Plan"@en)AnnotationAssertion(rdfs:label <DUL.owl#executesTask> "esegue il task"@it)AnnotationAssertion(rdfs:label <DUL.owl#overlaps> "sovrapposto a"@it)AnnotationAssertion(rdfs:comment <DUL.owl#hasTask> "A relation between roles and tasks, e.g. 'students have the duty of giving exams' (i.e. the Role 'student' hasTask the Task 'giving exams')."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isRelatedToDescription> "Any relation between descriptions."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#includesTime> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Place> "Place"@en)AnnotationAssertion(rdfs:label <DUL.owl#isParameterFor> "is parameter for"@en)AnnotationAssertion(rdfs:label <DUL.owl#isAgentIncludedIn> "is agent included in"@en)AnnotationAssertion(rdfs:label <DUL.owl#Agent> "Agent"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#directlyPrecedes> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasSetting> "has setting"@en)AnnotationAssertion(rdfs:label <DUL.owl#isUnifiedBy> "is unified by"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#conceptualizes> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#associatedWith> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#covers> "A relation between concepts and collections, where a Concept is said to cover a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a (reified) class.
E.g. the collection of vintage saxophones is covered by the Concept 'Saxophone' with the Parameter 'Vintage'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Set> "Set"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Description> "A Description is a SocialObject that represents a conceptualization. 
It can be thought also as a 'descriptive context' that uses or defines concepts in order to create a view on a 'relational context' (cf. Situation) out of a set of data or observations. 
For example, a Plan is a Description of some actions to be executed by agents in a certain way, with certain parameters; a Diagnosis is a Description that provides an interpretation for a set of observed entities, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isDescribedBy> "is described by"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasEventDate> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isConceptualizedBy> "is conceptualized by"@en)AnnotationAssertion(rdfs:label <DUL.owl#SocialRelation> "Social relation"@en)AnnotationAssertion(rdfs:label <DUL.owl#Object> "Oggetto"@it)AnnotationAssertion(rdfs:label <DUL.owl#isRelatedToConcept> "is related to concept"@en)AnnotationAssertion(rdfs:label <DUL.owl#includesAgent> "include l'agente"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Action> "An Event with at least one Agent that isParticipantIn it, and that executes a Task that typically isDefinedIn a Plan, Workflow, Project, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#SocialObject> "Oggetto sociale"@it)AnnotationAssertion(rdfs:label <DUL.owl#isExpressedBy> "is expressed by"@en)AnnotationAssertion(rdfs:label <DUL.owl#coparticipatesWith> "co-participates with"@en)AnnotationAssertion(rdfs:label <DUL.owl#expressesConcept> "esprime il concetto"@it)AnnotationAssertion(rdfs:label <DUL.owl#precedes> "precedes"@en)AnnotationAssertion(rdfs:label <DUL.owl#Workflow> "Workflow"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Task> "An EventType that classifies an Action to be executed. 
For example, reaching a destination is a task that can be executed by performing certain actions, e.g. driving a car, buying a train ticket, etc. 
The actions to execute a task can also be organized according to a Plan that is not the same as the one that defines the task (if any). 
For example, reaching a destination could be defined by a plan to get on holidays, while the plan to execute the task can consist of putting some travels into a sequence."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Method> "Metodo"@it)AnnotationAssertion(rdfs:label <DUL.owl#isExpressedBy> "è espresso da"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#LocalConcept> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isConstraintFor> "A relation between parameters and entities. It allows to assert generic constraints (encoded as parameters), e.g. MinimumAgeForDriving isConstraintFor John (where John is a legal subject under the TrafficLaw).
The intended semantics (not expressible in OWL) is that a Parameter isConstraintFor and Entity if the Parameter isParameterFor a Concept that classifies that Entity; moreover, it entails that a Parameter parametrizes a Region that isRegionFor that Entity. The use in OWL is therefore a shortcut to annotate what Parameter constrains what Entity"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Organism> "Organism"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PhysicalBody> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#overlaps> "overlaps"@en)AnnotationAssertion(rdfs:label <DUL.owl#includesAgent> "includes agent"@en)AnnotationAssertion(rdfs:label <DUL.owl#Region> "Regione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#describes> "The relation between a Description and an Entity : a Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system).
A same Entity can be given different descriptions, for example, an old cradle can be given a unifying Description based on the original aesthetic design, the functionality it was built for, or a new aesthetic functionality in which it can be used as a flower pot."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Event> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isTimeIntervalOf> "is time interval of"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PhysicalObject> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#involvesAgent> "involves agent"@en)AnnotationAssertion(rdfs:comment <DUL.owl#PhysicalPlace> "A physical object that is inherently located; for example, a water area."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isParameterFor> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#PhysicalObject> "Any Object that has a proper space region. The prototypical physical object has also an associated mass, but the nature of its mass can greatly vary based on the epistemological status of the object (scientifically measured, subjectively possible, imaginary)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasParticipant> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isConceptualizedBy> "è concettualizzato da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Diagnosis> "A Description of the Situation of a system, usually applied in order to control a normal behaviour, or to explain a notable behavior (e.g. a functional breakdown)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isAgentInvolvedIn> "is agent involved in"@en)AnnotationAssertion(rdfs:label <DUL.owl#Personification> "Personification"@en)AnnotationAssertion(rdfs:label <DUL.owl#Situation> "Situation"@en)AnnotationAssertion(rdfs:label <DUL.owl#SocialObject> "Social object"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isReferenceOfInformationRealizedBy> "The relation between entities and information realizations, e.g. between Italy and a paper copy of the text of the Italian Constitution."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isEventIncludedIn> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isRegionFor> "A relation between entities and regions, e.g. 'the color of my car is red'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isRealizedBy> "is realized by"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isAgentInvolvedIn> "Agent participation."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Contract> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Agent> "Agente"@it)AnnotationAssertion(rdfs:label <DUL.owl#farFrom> "far from"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasTimeInterval> "The generic relation between events and time intervals."@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isDescribedBy> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#farFrom> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Quality> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Collective> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isSpecializedBy> "is specialized by"@en)AnnotationAssertion(rdfs:comment <DUL.owl#definesTask> "A relation between a description and a task, e.g. the recipe for a cake defines the task 'boil'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Concept> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#includesTime> "include tempo"@it)AnnotationAssertion(rdfs:label <DUL.owl#isExecutedIn> "è eseguito mediante"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isRealizedBy> "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isReferenceOfInformationRealizedBy> "is reference of information realized by"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Diagnosis> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#SocialPerson> "Persona sociale"@it)AnnotationAssertion(rdfs:label <DUL.owl#Process> "Process"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasRegionDataValue> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isSettingFor> "include"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isRealizedBy> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isTaskDefinedIn> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#PlanExecution> "Plan executions are situations that proactively satisfy a plan. Subplan executions are proper parts of the whole plan execution."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isPartOf> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#SpaceRegion> "Space region"@en)AnnotationAssertion(rdfs:label <DUL.owl#isLocationOf> "è una localizzazione di"@it)AnnotationAssertion(rdfs:label <DUL.owl#Contract> "Contratto"@it)AnnotationAssertion(rdfs:comment <DUL.owl#hasDataValue> "A datatype property that encodes values from a datatype for an Entity. 
There are several ways to encode values in DOLCE (Ultralite):

1) Directly assert an xsd:_ value to an Entity by using hasDataValue
2) Assert a Region for an Entity by using hasRegion, and then assert an xsd:_ value to that Region, by using hasRegionDataValue
3) Assert a Quality for an Entity by using hasQuality, then assert a Region for that Quality, and assert an xsd:_ value to that Region, by using hasRegionDataValue
4) When the value is required, but not directly observed, assert a Parameter for an xsd:_ value by using hasParameterDataValue, and then associate the Parameter to an Entity by using isConstraintFor
5) When the value is required, but not directly observed, you can also assert a Parameter for a Region by using parametrizes, and then assert an xsd:_ value to that Region, by using hasRegionDataValue

The five approaches obey different requirements. 
For example, a simple value can be easily asserted by using pattern (1), but if one needs to assert an interval between two values, a Region should be introduced to materialize that interval, as pattern (2) suggests. 
Furthermore, if one needs to distinguish the individual Quality of a value, e.g. the particular nature of the density of a substance, pattern (3) can be used. 
Patterns (4) and (5) should be used instead when a constraint or a selection is modeled, independently from the actual observation of values in the real world."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#classifies> "classifica"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#InformationRealization> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Agent> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Method> "A method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. 
It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#specializes> "specializes"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasTask> "ha come obiettivo"@it)AnnotationAssertion(rdfs:label <DUL.owl#TimeInterval> "Time interval"@en)AnnotationAssertion(rdfs:label <DUL.owl#isExpandedIn> "is expanded in"@en)AnnotationAssertion(rdfs:label <DUL.owl#describes> "descrive"@it)AnnotationAssertion(rdfs:comment <DUL.owl#includesAction> "A relation between situations and actions, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included a burning of my fingers)."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Contract> "(The content of) an agreement between at least two agents that play a Party Role, about some contract object (a Task to be executed)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#ChemicalObject> "Chemical object"@en)AnnotationAssertion(rdfs:label <DUL.owl#Entity> "Entità"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isRegionFor> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#hasRegionDataValue> "A datatype property that encodes values for a Region, e.g. a float for the Region Height."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Role> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isSubordinatedTo> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isTaskOf> "è un obiettivo per"@it)AnnotationAssertion(rdfs:label <DUL.owl#follows> "segue"@it)AnnotationAssertion(rdfs:label <DUL.owl#Amount> "Quantità"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isCoveredBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isConcretelyExpressedBy> "è espresso concretamente da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#SocialObject> "Any Object that exists only within some communication Event, in which at least one PhysicalObject participates in. 
In other words, all objects that have been or are created in the process of social communication: for the sake of communication (InformationObject), for incorporating new individuals (SocialAgent, Place), for contextualizing existing entities (Situation), for collecting existing entities (Collection), or for describing existing entities (Description, Concept).
Being dependent on communication, all social objects need to be expressed by some information object (information object are self-expressing)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Organization> "Organizzazione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#actsThrough> "The relation holding between a PhysicalAgent and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated', e.g. a university can be acted for by a department, which is acted for by physical agents. AKA isActedBy"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#DesignedSubstance> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasLocation> "ha localizzazione"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SocialAgent> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isAgentInvolvedIn> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasEventDate> "has event date"@en)AnnotationAssertion(rdfs:label <DUL.owl#isTimeOfObservationOf> "è il tempo di osservazione di"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#concretelyExpresses> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Method> "Method"@en)AnnotationAssertion(rdfs:label <DUL.owl#isAgentIncludedIn> "è un agente nel contesto di"@it)AnnotationAssertion(rdfs:comment <DUL.owl#actsFor> "The relation holding between any Agent, and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated'; e.g. a university can be acted for by a department, which on its turm is acted for by physical agents."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#hasRole> "ha ruolo"@it)AnnotationAssertion(rdfs:label <DUL.owl#isSubordinatedTo> "is subordinated to"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Design> "A Description of the Situation, in terms of structure and function, held by an Entity for some reason.
A design is usually accompanied by the rationales behind the construction of the designed Entity (i.e. of the reasons why a design is claimed to be as such). For example, the actual design (a Situation) of a car or of a law is based on both the specification (a Description) of the structure, and the rationales used to construct cars or laws.
While designs typically describe entities to be constructed, they can also be used to describe 'refunctionalized' entities, or to hypothesize unknown functions. For example, a cradle can be refunctionalized as a flowerpot based on a certain home design."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isUnifiedBy> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#realizes> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalObject> "Physical object"@en)AnnotationAssertion(rdfs:label <DUL.owl#isSatisfiedBy> "is satisfied by"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SpaceRegion> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PlanExecution> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#UnitOfMeasure> "Unità di misura"@it)AnnotationAssertion(rdfs:comment <DUL.owl#expresses> "A relation between an InformationObject and a 'meaning', generalized here as a 'SocialObject'. For example: 'A Beehive is a structure in which bees are kept, typically in the form of a dome or box.' (Oxford dictionary)'; 'the term Beehive expresses the concept Beehive in my apiculture ontology'.
The intuition for 'meaning' is intended to be very broad. A separate, large comment is included for those who want to investigate more on what kind of meaning can be represented in what form."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isPartOf> "è parte di"@it)AnnotationAssertion(rdfs:label <DUL.owl#concretelyExpresses> "concretely expresses"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasPart> "ha parte"@it)AnnotationAssertion(rdfs:label <DUL.owl#Theory> "Teoria"@it)AnnotationAssertion(rdfs:label <DUL.owl#includesObject> "includes object"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isRelatedToConcept> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isTimeIntervalOf> "intervallo temporale di"@it)AnnotationAssertion(rdfs:label <DUL.owl#Region> "Region"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isParameterFor> "A Concept can have a Parameter that constrains the attributes that a classified Entity can have in a certain Situation, e.g. a 4WheelDriver Role definedIn the ItalianTrafficLaw has a MinimumAge parameter on the Amount 16."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#directlyPrecedes> "directly precedes"@en)AnnotationAssertion(rdfs:label <DUL.owl#expresses> "esprime"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#FormalEntity> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#expands> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#UnitOfMeasure> "Units of measure are conceptualized here as parameters on regions, which can be valued as datatype values."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#UnitOfMeasure> "Unit of measure"@en)AnnotationAssertion(rdfs:label <DUL.owl#isSpecializedBy> "è specializzato da"@it)AnnotationAssertion(rdfs:label <DUL.owl#Organism> "Organismo"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isQualityOf> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#hasRole> "A relation between an object and a role, e.g. the person 'John' has role 'student'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#precedes> "precede"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Relation> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Set> "Insieme {it}"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Plan> "A Description having an explicit Goal, to be achieved by executing the plan"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isSubordinatedTo> "è subordinato a"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#InformationObject> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SocialPerson> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isPartOf> "is part of"@en)AnnotationAssertion(rdfs:comment <DUL.owl#SocialObjectAttribute> "Any Region in a dimensional space that is used to represent some characteristic of a SocialObject, e.g. judgment values, social scalars, statistical attributes over a collection of entities, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalAgent> "Physical agent"@en)AnnotationAssertion(rdfs:label <DUL.owl#Substance> "Substance"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasParameter> "A Concept can have a Parameter that constrains the attributes that a classified Entity can have in a certain Situation, e.g. a 4WheelDriver Role definedIn the ItalianTrafficLaw has a MinimumAge parameter on the Amount 16."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#BiologicalObject> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#precedes> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isTimeIntervalOf> "The generic relation between time intervals and events."@en)AnnotationAssertion(rdfs:comment <DUL.owl#isParametrizedBy> "The relation between a Parameter, e.g. 'MajorAge', and a Region, e.g. '>17 year'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isLocationOf> "is location of"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isTimeOfObservationOf> "A relation to represent a (past, present or future) TimeInterval at which an Entity is observable.
In order to encode a specific time, a data value should be related to the TimeInterval. 
An alternative way of representing time is the datatype property: hasIntervalDate"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isPartOf> "A relation between any entities, e.g.'brain is a part of the human body'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#defines> "definisce"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Project> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#includesObject> "A relation between situations and objects, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me)."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#directlyFollows> "The intransitive follows relation. For example, Wednesday directly precedes Thursday. Directness of precedence depends on the designer conceptualization."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isRelatedToDescription> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isConstituentOf> "è costituente di"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#unifies> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasSetting> "è nel contesto di"@it)AnnotationAssertion(rdfs:comment <DUL.owl#hasEventDate> "A datatype property that encodes values from xsd:dateTime for an Event; a same Event can have more than one xsd:dateTime value: begin date, end date, date at which the interval holds, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Situation> "A view, consistent with ('satisfying') a Description, on a set of entities. 
It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description). 
For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan; a DiagnosedSituation is a context of observed entities that is interpreted on the basis of a Diagnosis, etc.
Situation is also able to represent reified n-ary relations, where isSettingFor is the top-level relation for all binary projections of the n-ary relation. If used in a transformation pattern for n-ary relations, the designer should take care of creating only one subclass of Situation for each n-ary relation, otherwise the 'identification constraint' (Calvanese et al., IJCAI 2001) could be violated."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Community> "Comunità"@it)AnnotationAssertion(rdfs:label <DUL.owl#realizes> "realizes"@en)AnnotationAssertion(rdfs:label <DUL.owl#FormalEntity> "Formal entity"@en)AnnotationAssertion(rdfs:label <DUL.owl#Action> "Azione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isConceptExpressedBy> "A relation between an InformationObject and a Concept , e.g. the term \"dog\" expresses the Concept \"dog\". For expressing a relational meaning, see the more general object property: expresses"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasConstraint> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasComponent> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasQuality> "ha qualità"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasConstituent> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Parameter> "A Concept that classifies a Region; the difference between a Region and a Parameter is that regions represent sets of observable values, e.g. the height  of a given building, while parameters represent constraints or selections on observable values, e.g. 'VeryHigh'. Therefore, parameters can also be used to constrain regions, e.g. VeryHigh on a subset of values of the Region Height applied to buildings, or to add an external selection criterion , such as measurement units, to regions, e.g. Meter on a subset of values from the Region Length applied to the Region Length applied to roads."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Goal> "Scopo"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isSatisfiedBy> "A relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#DesignedArtifact> "A PhysicalArtifact that is also described by a Design. This excludes simple recycling or refunctionalization of natural objects. Most common sense 'artifacts' can be included in this class: cars, lamps, houses, chips, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isMemberOf> "is member of"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#defines> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Person> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Narrative> "Narrative"@en)AnnotationAssertion(rdfs:comment <DUL.owl#SpaceRegion> "Any Region in a dimensional space that is used to localize an Entity ; i.e., it is not used to represent some characteristic (e.g. it excludes time intervals, colors, size values, judgment values, etc.). Differently from a Place , a space region has a specific dimensional space."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#includesAction> "includes action"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isDefinedIn> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isIntroducedBy> "A relation between a Description and a SocialAgent, e.g. a Constitutional Charter introduces the SocialAgent 'PresidentOfRepublic'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Goal> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#includesAgent> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isPreconditionOf> "Direct precedence applied to situations. 
E.g., 'claiming to find nuclear weapons in a foreign country is a precondition to declare war against it'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#parametrizes> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Substance> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isPostconditionOf> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isExpressedBy> "A relation between a dul:SocialObject (the 'meaning') and a dul:InformationObject (the 'expression'). 
For example: 'A Beehive is a structure in which bees are kept, typically in the form of a dome or box.' (Oxford dictionary)'; 'the term Beehive expresses the concept Beehive in my apiculture ontology'.
The intuition for 'meaning' is intended to be very broad. A separate, large comment is included in the encoding of 'expresses', for those who want to investigate more on what kind of meaning can be represented in what form."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Configuration> "A collection whose members are 'unified', i.e. organized according to a certain schema that can be represented by a Description.
Typically, a configuration is the collection that emerges out of a composed entity: an industrial artifact, a plan, a discourse, etc.  
E.g. a physical book has a configuration provided by the part-whole schema that holds together its cover, pages, ink. That schema, based on the individual relations between the book and its parts, can be represented in a reified way by means of a (structural) description, which is said to 'unify' the book configuration."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Description> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#associatedWith> "A catch-all object property, useful for alignment and querying purposes."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isConceptUsedIn> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#SocialRelation> "Any social relationship"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#characterizes> "A relation between concepts and collections, where a Concept is said to characterize a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a _proper subset of_ a (reified) class. This is different from covers, because it refers to an interpretation the entire reified class.
E.g. the collection of vintage saxophones is characterized by the Concept 'manufactured by hand', while it gets covered by the Concept 'Saxophone' with the Parameter 'Vintage'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#hasLocation> "has location"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasQuality> "has quality"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#directlyFollows> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isCoveredBy> "A relation between concepts and collections, where a Concept is said to cover a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a (reified) class.
E.g. the collection of vintage saxophones is covered by the Concept 'Saxophone' with the Parameter 'Vintage'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#executesTask> "executes task"@en)AnnotationAssertion(rdfs:label <DUL.owl#isObservableAt> "è osservabile a"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Personification> "A social entity with agentive features, but whose status is the result of a cultural transformation from e.g. a PhysicalObject, an Event, an Abstract, another SocialObject, etc. For example: the holy grail, deus ex machina, gods, magic wands, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Abstract> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#unifies> "unifica"@it)AnnotationAssertion(rdfs:label <DUL.owl#Configuration> "Configurazione"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#expresses> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isIntroducedBy> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#satisfies> "A relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#hasPart> "A schematic relation between any entities, e.g. 'the human body has a brain as part', '20th century contains year 1923', 'World War II includes the Pearl Harbour event'.
Subproperties and restrictions can be used to specialize hasPart for objects, events, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#introduces> "introduces"@en)AnnotationAssertion(rdfs:label <DUL.owl#involvesAgent> "coinvolge agente"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Theory> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#farFrom> "Generic distance relation between any Entity(s). E.g. Rome is far from Beijing, astronomy is far from necromancy."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#actsThrough> "agisce mediante"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isClassifiedBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalArtifact> "Artefatto fisico"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasTask> "has task"@en)AnnotationAssertion(rdfs:label <DUL.owl#Community> "Community"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Personification> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#directlyFollows> "segue direttamente"@it)AnnotationAssertion(rdfs:label <DUL.owl#sameSettingAs> "is in the same setting as"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasPostcondition> "has postcondition"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isActionIncludedIn> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Object> "Object"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#specializes> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#covers> "covers"@en)AnnotationAssertion(rdfs:label <DUL.owl#NaturalPerson> "Persona fisica"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isCharacterizedBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isTaskDefinedIn> "is task defined in"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Action> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Organization> "An internally structured, conventionally created SocialAgent, needing a specific Role and Agent that plays it, in order to act."@en)AnnotationAssertion(rdfs:label <DUL.owl#Collective> "Collective"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#covers> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Project> "Project"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Object> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isCharacterizedBy> "is characterized by {@en-us}"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#SocialAgent> "Social agent"@en)AnnotationAssertion(rdfs:comment <DUL.owl#SocialPerson> "A SocialAgent that needs the existence of a specific NaturalPerson in order to act (but the lifetime of the NaturalPerson has only to overlap that of the SocialPerson)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#satisfies> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isRoleDefinedIn> "is role defined in"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Event> "Any physical, social, or mental process, event, or state.

More theoretically, events can be classified in different ways, possibly based on 'aspect' (e.g. stative, continuous, accomplishement, achievement, etc.), on 'agentivity' (e.g. intentional, natural, etc.), or on 'typical participants' (e.g. human, physical, abstract, food, etc.).
Here no special direction is taken, and the following explains why: events are related to observable situations, and they can have different views at a same time.
If a position has to be suggested here anyway, the participant-based classification of events seems the most stable and appropriate for many modelling problems.

(1) Alternative aspectual views

Consider a same event 'rock erosion in the Sinni valley': it can be conceptualized as an accomplishment (what has brought a certain state to occur), as an achievement (the state resulting from a previous accomplishment), as a punctual event (if we collapse the time interval of the erosion into a time point), or as a transition (something that has changed from a state to a different one). 
In the erosion case, we could therefore have good motivations to shift from one aspect to another: a) causation focus, b) effectual focus, c) historical condensation, d) transition (causality).

The different views refer to the same event, but are still different: how to live with this seeming paradox? 
A typical solution e.g. in linguistics (cf. Levin's aspectual classes) and in DOLCE Full (cf. WonderWeb D18 axiomatization) is to classify events based on aspectual differences. But this solution would create different identities for a same event, where the difference is only based on the modeller's attitude.
An alternative solution is applied here, and exploits the notion of (observable) Situation; a Situation is a view, consistent with a Description, which can be observed of a set of entities. It can also be seen as a 'relational context' created by an observer on the basis of a 'frame'. Therefore, a Situation allows to create a context where each particular view can have a proper identity, while the Event preserves its own identity. 
For example, ErosionAsAccomplishment is a Situation where rock erosion is observed as a process leading to a certain achievement: the conditions (roles, parameters) that suggest such view are stated in a Description, which acts as a 'theory of accomplishments'. Similarly, ErosionAsTransition is a Situation where rock erosion is observed as an event that has changed a state to another: the conditions for such interpretation are stated in a different Description, which acts as a 'theory of state transitions'.
Consider that in no case the actual event is changed or enriched in parts by the aspectual view.

(2) Alternative intentionality views

Similarly to aspectual views, several intentionality views can be provided for a same Event. For example, one can investigate if an avalanche has been caused by immediate natural forces, or if there is any hint of an intentional effort to activate those natural forces.
Also in this case, the Event as such has not different identities, while the causal analysis generates situations with different identities, according to what Description is taken for interpreting the Event. 
On the other hand, if the possible actions of an Agent causing the starting of an avalanche are taken as parts of the Event, then this makes its identity change, because we are adding a part to it. 
Therefore, if intentionality is a criterion to classify events or not, this depends on if an ontology designer wants to consider causality as a relevant dimension for events' identity.

(3) Alternative participant views

A slightly different case is when we consider the basic participants to an Event. In this case, the identity of the Event is affected by the participating objects, because it depends on them. 
For example, if snow, mountain slopes, wind, waves, etc. are considered as an avalanche basic participants, or if we also want to add water, human agents, etc., that makes the identity of an avalanche change.
Anyway, this approach to event classification is based on the designer's choices, and more accurately mirrors lexical or commonsense classifications (see. e.g. WordNet 'supersenses' for verb synsets).

Ultimately, this discussion has no end, because realists will keep defending the idea that events in reality are not changed by the way we describe them, while constructivists will keep defending the idea that, whatever 'true reality' is about, it can't be modelled without the theoretical burden of how we observe and describe it. 
Both positions are in principle valid, but, if taken too radically, they focus on issues that are only partly relevant to the aim of computational ontologies, which only attempt to assist domain experts in representing what they want to conceptualize a certain portion of reality according to their own ideas. 
For this reason, in this ontology both events and situations are allowed, together with descriptions, in order to encode the modelling needs, independently from the position (if any) chosen by the designer."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isComponentOf> "è componente di"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasParameterDataValue> "ha valore"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#actsThrough> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasRegion> "has region"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Right> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Classification> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Event> "Event"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Process> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#FormalEntity> "Entità formale astratta"@it)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalArtifact> "Physical artifact"@en)AnnotationAssertion(rdfs:label <DUL.owl#characterizes> "characterizes"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasTimeInterval> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Project> "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed in relation to goals to be achieved, in order to achieve the main goal of the project. In other words, a project is a plan with a subgoal structure and multiple roles and tasks."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasCommonBoundary> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#hasParameterDataValue> "Parametrizes values from a datatype. For example, a Parameter MinimumAgeForDriving hasParameterDataValue 18 on datatype xsd:int, in the Italian traffic code. In this example, MinimumAgeForDriving isDefinedIn the Norm ItalianTrafficCodeAgeDriving.
More complex parametrization requires workarounds. E.g. AgeRangeForDrugUsage could parametrize data value: 14 to 50 on the datatype: xsd:int. Since complex datatypes are not allowed in OWL1.0, a solution to this can only work by creating two 'sub-parameters': MinimumAgeForDrugUsage (that hasParameterDataValue 14) and MaximumAgeForDrugUsage (that hasParameterDataValue 50), which are components of (cf. hasComponent) the main Parameter AgeRangeForDrugUsage.
Ordering on subparameters can be created by using or specializing the object property 'precedes'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Substance> "Sostanza"@it)AnnotationAssertion(rdfs:label <DUL.owl#isConstituentOf> "is constituent of"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#expressesConcept> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isRoleDefinedIn> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#expressesConcept> "expresses concept"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasConstituent> "has constituent"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasRegion> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#usesConcept> "usa il concetto"@it)AnnotationAssertion(rdfs:label <DUL.owl#isEventIncludedIn> "è un evento nel contesto di"@it)AnnotationAssertion(rdfs:label <DUL.owl#isConstraintFor> "is constraint for"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isExpressedBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isReferenceOf> "is reference of"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasQuality> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Concept> "A Concept is a SocialObject, and isDefinedIn some Description; once defined, a Concept can be used in other Description(s). If a Concept isDefinedIn exactly one Description, see the LocalConcept class.
The classifies relation relates Concept(s) to Entity(s) at some TimeInterval"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#WorkflowExecution> "Esecuzione di workflow"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isSpecializedBy> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#includesEvent> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#involvesAgent> "Agent participation."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#hasParticipant> "has participant"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasCommonBoundary> "A relation to encode either formal or informal characterizations of 'boundaries' common to two different entities: an Event that ends when another begins, two abstract regions that have a common topological boundary, two objects that are said to be 'in contact' from a commonsense perspective, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SocialObjectAttribute> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Design> "Design"@en)AnnotationAssertion(rdfs:label <DUL.owl#PlanExecution> "Esecuzione di piano"@it)AnnotationAssertion(rdfs:label <DUL.owl#unifies> "unifies"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isTaskOf> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isReferenceOfInformationRealizedBy> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isReferenceOf> "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection .
The isReferenceOf relation is irreflexive, differently from its inverse isAbout."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#SocialPerson> "Social person"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isReferenceOf> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#unifies> "A Collection has a unification criterion, provided by a Description; for example, a community of practice can be unified by a shared theory or interest, e.g. the community that makes research on mirror neurons shares some core knowledge about mirror neurons, which can be represented as a Description MirrorNeuronTheory that unifies the community. There can be several unifying descriptions."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Collection> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Amount> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isCoveredBy> "is covered by"@en)AnnotationAssertion(rdfs:comment <DUL.owl#parametrizes> "The relation between a Parameter, e.g. 'MajorAgeLimit', and a Region, e.g. '18_year'.
For a more data-oriented relation, see hasDataValue"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isAbout> "si riferisce a"@it)AnnotationAssertion(rdfs:label <DUL.owl#directlyPrecedes> "precede direttamente"@it)AnnotationAssertion(rdfs:label <DUL.owl#isConceptUsedIn> "is concept used in"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SocialRelation> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasTask> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasPrecondition> "has precondition"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasParticipant> "A relation between an object and a process, e.g. 'John took part in the discussion', 'a large mass of snow fell during the avalanche', or 'a cook, some sugar, flour, etc. are all present in the cooking of a cake'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isCharacterizedBy> "è caratterizzato da"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasComponent> "ha componente"@it)AnnotationAssertion(rdfs:label <DUL.owl#FunctionalSubstance> "Functional substance"@en)AnnotationAssertion(rdfs:label <DUL.owl#isQualityOf> "è una qualità di"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SpatioTemporalRegion> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalAgent> "Agente fisico"@it)AnnotationAssertion(rdfs:comment <DUL.owl#PhysicalAttribute> "Physical value of a physical object, e.g. density, color, etc."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isExpandedIn> "A partial order relation that holds between descriptions. It represents the proper part relation between a description and another description featuring the same properties as the former, with at least one additional one.
Descriptions can be expanded either by adding other descriptions as parts, or by refining concepts that are used by them. 
An 'intention' to expand must be present (unless purely formal theories are considered, but even in this case a criterion of relevance is usually active)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isSatisfiedBy> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isRoleOf> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#actsThrough> "acts through"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isObjectIncludedIn> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#EventType> "A Concept that classifies an Event . An event type describes how an Event should be interpreted, executed, expected, seen, etc., according to the Description that the EventType isDefinedIn (or used in)"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#executesTask> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Parameter> "Parameter"@en)AnnotationAssertion(rdfs:label <DUL.owl#Description> "Description"@en)AnnotationAssertion(rdfs:label <DUL.owl#isQualityOf> "is quality of"@en)AnnotationAssertion(rdfs:label <DUL.owl#Classification> "Classificazione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#PhysicalArtifact> "Any PhysicalObject that isDescribedBy a Plan .
This axiomatization is weak, but allows to talk of artifacts in a very general sense, i.e. including recycled objects, objects with an intentional functional change, natural objects that are given a certain function, even though they are not modified or structurally designed, etc. PhysicalArtifact(s) are not considered disjoint from PhysicalBody(s), in order to allow a dual classification when needed. E.g.,
FunctionalSubstance(s) are included here as well.
Immaterial (non-physical) artifacts (e.g. texts, ideas, cultural movements, corporations, communities, etc. can be modelled as social objects (see SocialObject), which are all 'artifactual' in the weak sense assumed here."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isSubordinatedTo> "Direct succession applied to concepts. E.g. the role 'Officer' is subordinated to 'Director'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#nearTo> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isClassifiedBy> "A relation between a Concept and an Entity, e.g. 'John is considered a typical rude man'; your last concert constitutes the achievement of a lifetime; '20-year-old means she's mature enough'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Classification> "A special kind of Situation that allows to include time indexing for the classifies relation in situations. For example, if a Situation s 'my old cradle is used in these days as a flower pot' isSettingFor the entity 'my old cradle' and the TimeIntervals '8June2007' and '10June2007', and we know that s satisfies a functional Description for aesthetic objects, which defines the Concepts 'flower pot' and 'flower', then we also need to know what concept classifies 'my old cradle' at what time.
In order to solve this issue, we need to create a sub-situation s' for the classification time: 'my old cradle is a flower pot in 8June2007'. Such sub-situation s' isPartOf s."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isExpandedIn> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#classifies> "A relation between a Concept and an Entity, e.g. the Role 'student' classifies a Person 'John'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#hasIntervalDate> "intervallo ha data"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isTimeOfObservationOf> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Pattern> "Any invariance detected from a dataset, or from observation; also, any invariance proposed based on top-down considerations.
E.g. patterns detected and abstracted by an organism, by pattern recognition algorithms, by machine learning techniques, etc.
An occurrence of a pattern is an 'observable', or detected Situation"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#includesTime> "A relation between situations and time intervals, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: preparing my coffee was held this morning). A data value attached to the time interval typically complements this modelling pattern."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#concretelyExpresses> "A relation between an InformationRealization and a Description, e.g. 'the printout of the Italian Constitution concretelyExpresses the Italian Constitution'. It should be supplied also with a rule stating that the InformationRealization realizes an InformationObject that expresses the Description"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Agent> "Additional comment: a computational agent can be considered as a PhysicalAgent that realizes a certain class of algorithms (that can be considered as instances of InformationObject) that allow to obtain some behaviors that are considered typical of agents in general. For an ontology of computational objects based on DOLCE see e.g. KCO.owl."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#LocalConcept> "Local concept"@en)AnnotationAssertion(rdfs:label <DUL.owl#expresses> "expresses"@en)AnnotationAssertion(rdfs:label <DUL.owl#isExecutedIn> "is executed in"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isConstituentOf> "'Constituency' depends on some layering of  the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are  typical layerings. 
Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense.
A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts.
Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. 
In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Person> "Persons in commonsense intuition, which does not apparently distinguish between either natural or social persons."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#hasSetting> "A relation between entities and situations, e.g. 'this morning I've prepared my coffee with a new fantastic Arabica', i.e.: (an amount of) a new fantastic Arabica hasSetting the preparation of my coffee this morning."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#nearTo> "near to"@en)AnnotationAssertion(rdfs:label <DUL.owl#Right> "Diritto"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasTimeInterval> "ha intervallo temporale"@it)AnnotationAssertion(rdfs:label <DUL.owl#isObservableAt> "is observable at"@en)AnnotationAssertion(rdfs:label <DUL.owl#isParameterFor> "è un parametro per"@it)AnnotationAssertion(rdfs:label <DUL.owl#isReferenceOfInformationRealizedBy> "è riferimento dell'informazione realizzata da"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasRole> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Situation> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#usesConcept> "uses concept"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isConcretelyExpressedBy> "A relation between an InformationRealization and a Description, e.g. 'the printout of the Italian Constitution concretelyExpresses the Italian Constitution'. It should be supplied also with a rule stating that the InformationRealization realizes an InformationObject that expresses the Description"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#hasQuality> "A relation between entities and qualities, e.g. 'Dmitri's skin is yellowish'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#hasConstituent> "'Constituency' depends on some layering of  the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are  typical layerings. 
Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense.
A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts.
Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. 
In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PhysicalArtifact> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasDataValue> "has data value"@en)AnnotationAssertion(rdfs:label <DUL.owl#isPostconditionOf> "è postcondizione di"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Organism> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isSettingFor> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#overlaps> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isParticipantIn> "is participant in"@en)AnnotationAssertion(rdfs:label <DUL.owl#isConceptUsedIn> "è un concetto usato in"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasRegionDataValue> "has region data value"@en)AnnotationAssertion(rdfs:label <DUL.owl#Group> "Gruppo"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isAgentIncludedIn> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#includesEvent> "includes event"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasComponent> "has component"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasParameter> "has parameter"@en)AnnotationAssertion(rdfs:label <DUL.owl#conceptualizes> "conceptualizes"@en)AnnotationAssertion(rdfs:label <DUL.owl#isDefinedIn> "è definito in"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isUnifiedBy> "A Collection has a unification criterion, provided by a Description; for example, a community of practice can be unified by a shared theory or interest, e.g. the community that makes research on mirror neurons shares some core knowledge about mirror neurons, which can be represented as a Description MirrorNeuronTheory that unifies the community. There can be several unifying descriptions."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#expressesConcept> "A relation between an InformationObject and a Concept , e.g. the term \"dog\" expresses the Concept \"dog\". For expressing a relational meaning, see the more general object property: expresses"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isPostconditionOf> "is postcondition of"@en)AnnotationAssertion(rdfs:label <DUL.owl#isReferenceOf> "è il riferimento di"@it)AnnotationAssertion(rdfs:label <DUL.owl#Right> "Right"@en)AnnotationAssertion(rdfs:label <DUL.owl#characterizes> "caratterizza"@it)AnnotationAssertion(rdfs:label <DUL.owl#isActionIncludedIn> "è un'azione nel contesto di"@it)AnnotationAssertion(rdfs:comment <DUL.owl#includesAgent> "A relation between situations and persons, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Person> "Persona {it}"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isIntroducedBy> "è introdotto da"@it)AnnotationAssertion(rdfs:label <DUL.owl#describes> "describes"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#TypeCollection> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Set> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasParameter> "ha parametro"@it)AnnotationAssertion(rdfs:label <DUL.owl#satisfies> "satisfies"@en)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalAttribute> "Caratteristica fisica"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasMember> "has member"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasComponent> "The hasPart relation without transitivity, holding between an Object (the system) and another (the component), and assuming a Design that structures the Object."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Parameter> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Concept> "Concept"@en)AnnotationAssertion(rdfs:comment <DUL.owl#precedes> "A relation between entities, expressing a 'sequence' schema. 
E.g. 'year 1999 precedes 2000', 'deciding what coffee to use' precedes 'preparing coffee', 'World War II follows World War I', 'in the Milan to Rome autoroute, Bologna precedes Florence', etc.
It can then be used between tasks, processes, time intervals, spatially locate objects, situations, etc. 
Subproperties can be defined in order to distinguish the different uses."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#sameSettingAs> "A relation between two entities participating in a same Situation; e.g., 'Our company provides an antivenom service' (the situation is the service, the two entities are the company and the antivenom)."@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isObservableAt> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Norm> "Norm"@en)AnnotationAssertion(rdfs:label <DUL.owl#isRealizedBy> "è realizzato da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#CollectiveAgent> "A SocialAgent that is actedBy agents that are (and act as) members of a Collective. A collective agent can have roles that are also roles of those agents.
For example, in sociology, a 'group action' is the situation in which a number of people (that result to be members of a collective) in a given area behave in a coordinated way in order to achieve a (often common) goal. The Agent in such a Situation is not single, but a CollectiveAgent (a Group). This can be generalized to the notion of social movement, which assumes a large Community or even the entire Society as agents.
The difference between a CollectiveAgent and an Organization is that a Description that introduces a CollectiveAgent is also one that unifies the corresponding Collective. In practice, this difference makes collective agents 'less stable' than organizations, because they have a dedicated, publicly recognizable Description that is conceived to introduce them."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#conceptualizes> "concettualizza"@it)AnnotationAssertion(rdfs:comment <DUL.owl#TimeInterval> "Any Region in a dimensional space that aims at representing time."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#EventType> "Event type"@en)AnnotationAssertion(rdfs:comment <DUL.owl#introduces> "A relation between a Description and a SocialAgent, e.g. a Constitutional Charter introduces the SocialAgent 'PresidentOfRepublic'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#FunctionalSubstance> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasMember> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Collective> "A Collection whose members are agents, e.g. \"the nurses\", \"the Italian rockabilly fans\".
Collectives, facon de parler, can act as agents, although they are not assumed here to be agents (they are even disjoint from the class SocialAgent). This is represented by admitting collectives in the range of the relations having Agent in their domain or range."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#TimeInterval> "Intervallo di tempo"@it)AnnotationAssertion(rdfs:label <DUL.owl#isTimeIncludedIn> "is time included in"@en)AnnotationAssertion(rdfs:label <DUL.owl#expands> "espande"@it)AnnotationAssertion(rdfs:label <DUL.owl#Plan> "Piano"@it)AnnotationAssertion(rdfs:label <DUL.owl#PlanExecution> "Plan execution"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Entity> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isEventIncludedIn> "is event included in"@en)AnnotationAssertion(rdfs:label <DUL.owl#isRoleOf> "is role of"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#NaturalPerson> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#parametrizes> "parametrizes"@en)AnnotationAssertion(rdfs:label <DUL.owl#includesAction> "include azione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Organism> "A physical objects with biological characteristics, typically that organisms can self-reproduce."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#sameSettingAs> "è nella stessa situazione di"@it)AnnotationAssertion(rdfs:label <DUL.owl#Situation> "Situazione"@it)AnnotationAssertion(rdfs:label <DUL.owl#Pattern> "Pattern"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasConstraint> "ha vincolo"@it)AnnotationAssertion(rdfs:label <DUL.owl#Collection> "Collection"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isMemberOf> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#CollectiveAgent> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#involvesAgent> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isUnifiedBy> "è unificato da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isSpecializedBy> "A partial order relation that holds between social objects. It represents the subsumption relation between e.g. a Concept and another Concept that is broader in extensional interpretation, but narrowe in intensional interpretation.
E.g. PhDStudent Role specializes Student Role"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Amount> "Amount"@en)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalBody> "Physical body"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#UnitOfMeasure> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Theory> "Theory"@en)AnnotationAssertion(owl:versionInfo <DUL.owl#SocialPerson> "Formerly: Person (changed to avoid confusion with commonsense intuition)"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isParametrizedBy> "è parametrizzato da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#conceptualizes> "A relation stating that an Agent is internally representing a SocialObject: situations, descriptions, concepts, etc. E.g., 'John believes in the conspiracy theory'; 'Niels Bohr created the solar-system metaphor for the atomic theory'; 'Jacques assumes all swans are white'; 'the task force members share the attack plan'.
Conceptualizations can be distinguished into different forms, primarily based on the type of SocialObject that is conceptualized. Descriptions and concepts can be 'assumed', situations can be 'believed' or 'known', plans can be 'adopted', etc. (see ontology: Conceptualization.owl."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isCoveredBy> "è ricoperto da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isExecutedIn> "A relation between an action and a task, e.g. 'putting some water in a pot and putting the pot on a fire until the water starts bubbling' executes the task 'boiling'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Abstract> "Any Entity that cannot be located in space-time. E.g. mathematical entities: formal semantics elements, regions within dimensional spaces, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasDataValue> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#hasPostcondition> "Direct succession applied to situations. 
E.g., 'A postcondition of our Plan is to have things settled'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Entity> "Entity"@en)AnnotationAssertion(rdfs:label <DUL.owl#definesRole> "defines role"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Task> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasParameter> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Classification> "Classification"@en)AnnotationAssertion(rdfs:label <DUL.owl#isCharacterizedBy> "is characterized by"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasLocation> "A generic, relative spatial location, holding between any entities. E.g. 'the cat is on the mat', 'Omar is in Samarcanda', 'the wound is close to the femural artery'.
For 'absolute' locations, see SpaceRegion"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isObservableAt> "A relation to represent a (past, present or future) TimeInterval at which an Entity is observable.
In order to encode a specific time, a data value should be related to the TimeInterval. 
An alternative way of representing time is the datatype property: hasIntervalDate"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#expands> "expands"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isRoleOf> "A relation between an object and a role, e.g. 'student' is the role of 'John'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#expresses> "This is a large comment field for those who want to investigate the different uses of the 'expresses' relation for modeling different approaches to meaning characterization and modeling.
For example, in all these cases, some aspect of meaning is involved:

- Beehive means \"a structure in which bees are kept, typically in the form of a dome or box.\" (Oxford dictionary)
- 'Beehive' is a synonym in noun synset 09218159 \"beehive|hive\" (WordNet)
- 'the term Beehive can be interpreted as the fact of 'being a beehive', i.e. a relation that holds for concepts such as Bee, Honey, Hosting, etc.'
- 'the text of Italian apiculture regulation expresses a rule by which beehives should be kept at least one kilometer away from inhabited areas'
- 'the term Beehive expresses the concept Beehive'
- ''Beehive' for apiculturists does not express the same meaning as for, say, fishermen'
- 'Your meaning of 'Beautiful' does not seem to fit mine'
- ''Beehive' is formally interpreted as the set of all beehives'
- 'from the term 'Beehive', we can build a vector space of statistically significant cooccurring terms in the documents that contain it'
- the lexeme 'Belly' expresses the role 'Body_Part' in the frame 'ObservableBodyParts' (FrameNet)

As the examples suggest, the 'meaning of meaning' is dependent on the background approach/theory that one assumes. One can hardly make a summary of the too many approaches and theories of meaning, therefore this relation is maybe the most controversial and difficult to explain; normally, in such cases it would be better to give up formalizing. 
However, the usefulness of having a 'semantic abstraction' in modeling information objects is so high (e.g. for the semantic web, interoperability, reengineering, etc.), that we accept this challenging task, although without taking any particular position in the debate. 
We provide here some examples, which we want to generalize upon when using the 'expresses' relation to model semantic aspects of social reality.

In the most common approach, lexicographers that write dictionaries, glossaries, etc. assume that the meaning of a term is a paraphrase (or 'gloss', or 'definition'). 
Another approach is provided by concept schemes like thesauri and lexicons, which assume that the meaning of a term is a 'concept', encoded as a 'lemma', 'synset', or 'descriptor'.
Still another approach is that of psychologists and cognitive scientists, which often assume that the meaning of an information object is a concept encoded in the mind or cognitive system of an agent. 
A radically different approach is taken by social scientists and semioticians, who usually assume that meanings of an information object are spread across the communication practices in which members of a community use that object.
Another approach that tackles the distributed nature of meaning is assumed by geometrical models of semantics, which assume that the meaning of an InformationObject (e.g. a word) results from the set of informational contexts (e.g. within texts) in which that object is used similarly.
The logical approach to meaning is still different, since it assumes that the meaning of e.g. a term is equivalent to the set of individuals that the term can be applied to; for example, the meaning of 'Ali' is e.g. an individual person called Ali, the meaning of 'Airplane' is e.g. the set of airplanes, etc. 
Finally, an approach taken by structuralist linguistics and frame semantics is that a meaning is the relational context in which an information object can be applied; for example, a meaning of 'Airplane' is situated e.g. in the context ('frame') of passenger airline flights.

These different approaches are not necessarily conflicting, and they mostly talk about different aspects of so-called 'semantics'. They can be summarized and modelled within DOLCE-Ultralite as follows (notice that such list is far from exhaustive):

(1) Informal meaning (as for linguistic or commonsense semantics: a distinction is assumed between (informal) meaning and reference; see isAbout for an alternative pattern on reference)
	- Paraphrase meaning (as for lexicographic semantics). Here it is modelled as the expresses relation between instances of InformationObject and different instances of InformationObject that act as 'paraphrases'
	- Conceptual meaning (as for 'concept scheme' semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Concept
	- Relational meaning (as for frame semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of Description
	- Cognitive meaning (as for 'psychological' semantics). Here it is modelled as the expresses relation between any instance of InformationObject and any different instance of InformationObject that isRealizedBy a mental, cognitive or neural state (depending on which theory of mind is assumed). Such states can be considered here as instances of Process (occurring in the mind, cognitive system, or neural system of an agent)
	- Cultural meaning (as for 'social science' semantics). Here it is modelled as the expresses relation between instances of InformationObject and instances of SocialObject (institutions, cultural paradigms, norms, social practices, etc.)
	- Distributional meaning (as for geometrical models of meaning). Here it is modelled as the expresses relation between any instance of InformationObject and any different instance of InformationObject that isFormallyRepresentedIn some (geometrical) Region (e.g. a vector space)

(2) Formal meaning (as for logic and formal semantics: no distinction is assumed between informal meaning and reference, therefore between 'expresses' and 'isAbout', which can be used interchangeably)
	- Object-level formal meaning (as in the traditional first-order logic semantics). Here it is modelled as the expresses relation between an instance of InformationObject and an instance of Collection that isGroundingFor (in most cases) a Set; isGroundingFor is defined in the ontology: IOLite.owl
	- Modal formal meaning (as in possible-world semantics). Here it is modelled as the expresses relation between an instance of InformationObject and an instance of Collection that isGroundingFor a Set, and which isPartOf some different instance of Collection that isGroundingFor a PossibleWorld

This is only a first step to provide a framework, in which one can model different aspects of meaning. A more developed ontology should approach the problem of integrating the different uses of 'expresses', so that different theories, resources, methods can interoperate."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isClassifiedBy> "is classified by"@en)AnnotationAssertion(rdfs:comment <DUL.owl#directlyPrecedes> "The intransitive precedes relation. For example, Monday directly precedes Tuesday. Directness of precedence depends on the designer conceptualization."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isLocationOf> "A generic, relative localization, holding between any entities. E.g. 'Rome is the seat of the Pope', 'the liver is the location of the tumor'.
For 'absolute' locations, see SpaceRegion"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Relation> "Relation"@en)AnnotationAssertion(rdfs:label <DUL.owl#isObjectIncludedIn> "è un oggetto nel contesto di"@it)AnnotationAssertion(rdfs:label <DUL.owl#Place> "Luogo"@it)AnnotationAssertion(rdfs:label <DUL.owl#Quality> "Qualità"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isComponentOf> "The hasPart relation without transitivity, holding between an Object (the system) and another (the component), and assuming a Design that structures the Object."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Project> "Progetto"@it)AnnotationAssertion(rdfs:label <DUL.owl#associatedWith> "associatedWith"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isConceptualizedBy> "A relation stating that an Agent is internally representing a Description . E.g., 'John believes in the conspiracy theory'; 'Niels Bohr created a solar-system metaphor for his atomic theory'; 'Jacques assumes all swans are white'; 'the task force shares the attack plan'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Object> "Any physical, social, or mental object, or a substance. Following DOLCE Full, objects are always participating in some event (at least their own life), and are spatially located."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#definesRole> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isDescribedBy> "The relation between an Entity and a Description: a Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system).
A same Entity can be given different descriptions, for example, an old cradle can be given a unifying Description based on the original aesthetic design, the functionality it was built for, or a new aesthetic functionality in which it can be used as a flower pot."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#SocialObject> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Workflow> "Workflow"@en)AnnotationAssertion(rdfs:label <DUL.owl#WorkflowExecution> "Workflow execution"@en)AnnotationAssertion(rdfs:label <DUL.owl#SocialRelation> "Relazione sociale"@it)AnnotationAssertion(rdfs:label <DUL.owl#isAgentInvolvedIn> "è un agente coinvolto in"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#coparticipatesWith> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalPlace> "Luogo fisico"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Theory> "A Theory is a Description that represents a set of assumptions for describing something, usually general. Scientific, philosophical, and commonsense theories can be included here.
This class can also be used to act as 'naturalized reifications' of logical theories (of course, they will be necessarily incomplete in this case, because second-order entities are represented as first-order ones)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isRegionFor> "è una regione di"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Role> "A Concept that classifies an Object"^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isConceptualizedBy> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Method> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#definesRole> "A relation between a description and a role, e.g. the recipe for a cake defines the role 'ingredient'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#parametrizes> "parametrizza"@it)AnnotationAssertion(rdfs:label <DUL.owl#Transition> "Transizione"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#characterizes> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Abstract> "Astratto"@it)AnnotationAssertion(rdfs:label <DUL.owl#isSatisfiedBy> "è soddisfatta da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Right> "A legal position by which an Agent is entitled to obtain something from another Agent , under specified circumstances, through an enforcement explicited either in a Law, Contract , etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isParametrizedBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isSuperordinatedTo> "is superordinated to"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasRole> "has role"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Workflow> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#describes> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#InformationRealization> "Information realization"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasIntervalDate> "A datatype property that encodes values from xsd:dateTime for a TimeInterval; a same TimeInterval can have more than one xsd:dateTime value: begin date, end date, date at which the interval holds, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#actsFor> "agisce per"@it)AnnotationAssertion(rdfs:label <DUL.owl#Role> "Role"@en)AnnotationAssertion(rdfs:label <DUL.owl#specializes> "specializza"@it)AnnotationAssertion(rdfs:label <DUL.owl#isActionIncludedIn> "is action included in"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isSuperordinatedTo> "Direct precedence applied to concepts. E.g. the role 'Executive' is superordinated to 'DepartmentManager'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isRoleDefinedIn> "A relation between a description and a role, e.g. the role 'Ingredient' is defined in the recipe for a cake."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isSuperordinatedTo> "è superordinato a"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isConstraintFor> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#InformationEntity> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasIntervalDate> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasConstituent> "ha costituente"@it)AnnotationAssertion(rdfs:label <DUL.owl#Role> "Ruolo"@it)AnnotationAssertion(rdfs:label <DUL.owl#Task> "Task"@it)AnnotationAssertion(rdfs:label <DUL.owl#Concept> "Concetto"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isSuperordinatedTo> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasMember> "ha membro"@it)AnnotationAssertion(rdfs:comment <DUL.owl#InformationEntity> "A piece of information, be it concretely realized or not."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalPlace> "Physical place"@en)AnnotationAssertion(rdfs:comment <DUL.owl#hasPrecondition> "Direct precedence applied to situations. 
E.g., 'A precondition to declare war against a foreign country is claiming to find nuclear weapons in it'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#InformationObject> "Oggetto informativo"@it)AnnotationAssertion(rdfs:label <DUL.owl#isConcretelyExpressedBy> "is concretely expressed by"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PhysicalAgent> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#PhysicalBody> "Physical bodies are PhysicalObject(s), for which we tend to neutralize any possible artifactual character. They can have several granularity levels: geological, chemical, physical, biological, etc."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isPreconditionOf> "is precondition of"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isSettingFor> "A relation between situations and entities, e.g. 'this morning I've prepared my coffee with a new fantastic Arabica', i.e.: the preparation of my coffee this morning is the setting for (an amount of) a new fantastic Arabica."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#InformationRealization> "A concrete realization of an InformationObject, e.g. the written document containing the text of a law."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Design> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Event> "Evento"@it)AnnotationAssertion(rdfs:label <DUL.owl#Diagnosis> "Diagnosis"@en)AnnotationAssertion(rdfs:label <DUL.owl#isClassifiedBy> "è classificato da"@it)AnnotationAssertion(rdfs:label <DUL.owl#isTimeIncludedIn> "è un tempo nel contesto di"@it)AnnotationAssertion(rdfs:label <DUL.owl#isMemberOf> "è membro di"@it)AnnotationAssertion(rdfs:label <DUL.owl#SocialAgent> "Agente sociale"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#DesignedArtifact> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isPreconditionOf> "è precondizione di"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#realizesInformationAbout> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Place> "A location, in a very generic sense: a political geographic entity (Roma, Lesotho), a non-material location determined by the presence of other entities (\"the area close to Roma\"), pivot events or signs (\"the area where the helicopter fell\"), complements of other entities (\"the area under the table\"), etc. 
In this generic sense, a Place is an \"approximate\" location. For an \"absolute\" location, see the class SpaceRegion"^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isMemberOf> "A relation between collections and entities, e.g. 'the Night Watch by Rembrandt is in the Rijksmuseum collection'; 'Davide is member of the Pen Club', 'Igor is one the subjects chosen for the experiment'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isRoleOf> "è un ruolo di"@it)AnnotationAssertion(rdfs:comment <DUL.owl#InformationObject> "A piece of information, such as a musical composition, a text, a word, a picture, independently from how it is concretely realized."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Relation> "Relazione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#specializes> "A partial order relation that holds between social objects. 
It mainly represents the subsumption relation between e.g. a Concept or Description and another Concept (resp. Description) that is broader in extensional interpretation, but narrower in intensional interpretation. For example, the role PhDStudent specializes the role Student.
Another possible use is between a Collection that isCoveredBy a Concept A, and another Collection that isCoveredBy a Concept B that on its turm specializes A. For example, the 70,000 series Selmer Mark VI saxophone Collection specializes the Selmer Mark VI saxophone Collection."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isIntroducedBy> "is introduced by"@en)AnnotationAssertion(rdfs:label <DUL.owl#SpaceRegion> "Regione di spazio"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasRegionDataValue> "regione ha valore"@it)AnnotationAssertion(rdfs:label <DUL.owl#Task> "Task"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasPart> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#FormalEntity> "Entities that are formally defined and are considered independent from the social context in which they are used. They cannot be localized in space or time. Also called 'Platonic entities'.
Mathematical and logical entities are included in this class: sets, categories, tuples, costants, variables, etc.
Abstract formal entities are distinguished from information objects, which are supposed to be part of a social context, and are localized in space and time, therefore being (social) objects.
For example, the class 'Quark' is an abstract formal entity from the purely set-theoretical perspective, but it is an InformationObject from the viewpoint of ontology design, when e.g. implemented in a logical language like OWL.
Abstract formal entities are also distinguished from Concept(s), Collection(s), and Description(s), which are part of a social context, therefore being SocialObject(s) as well.
For example, the class 'Quark' is an abstract FormalEntity from the purely set-theoretical perspective, but it is a Concept within history of science and cultural dynamics.

These distinctions allow to represent two different notions of 'semantics': the first one is abstract and formal ('formal semantics'), and formallyInterprets symbols that are about entities whatsoever; for example, the term 'Quark' isAbout the Collection of all quarks, and that Collection isFormalGroundingFor the abstract class 'Quark' (in the extensional sense). 
The second notion is social, localized in space-time ('social semantics'), and can be used to interpret entities in the intensional sense. For example, the Collection of all quarks isCoveredBy the Concept 'Quark', which is also expressed by the term 'Quark'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isQualityOf> "A relation between entities and qualities, e.g. 'Dmitri's skin is yellowish'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#NaturalPerson> "Natural person"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Organization> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#definesTask> "definisce il task"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#EventType> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isRelatedToConcept> "Any relation between concepts, e.g. superordinated, conceptual parthood, having a parameter, having a task, superordination, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#definesTask> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#PhysicalAgent> "A PhysicalObject that is capable of self-representing (conceptualizing) a Description in order to plan an Action. 
A PhysicalAgent is a substrate for (actsFor) a Social Agent"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#satisfies> "soddisfa"@it)AnnotationAssertion(rdfs:label <DUL.owl#Goal> "Goal"@en)AnnotationAssertion(rdfs:comment <DUL.owl#usesConcept> "A generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description. This last condition cannot be encoded for object properties in OWL."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#definesTask> "defines task"@en)AnnotationAssertion(rdfs:label <DUL.owl#isConceptExpressedBy> "è un concetto espresso da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Amount> "A quantity, independently from how it is measured, computed, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasParameterDataValue> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#TypeCollection> "A Collection whose members are the maximal set of individuals that share the same (named) type, e.g. \"the gem stones\", \"the Italians\".
This class is very useful to apply a variety of the so-called \"ClassesAsValues\" design pattern, when it is used to talk about the extensional aspect of a class. An alternative variety of the pattern applies to the intensional aspect of a class, and the class Concept should be used instead."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#BiologicalObject> "Biological object"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Pattern> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#TypeCollection> "Collezione di un tipo"@it)AnnotationAssertion(rdfs:comment <DUL.owl#LocalConcept> "A Concept that isDefinedIn exactly 1 Description. For example, the Concept 'coffee' in a 'preparesCoffee' relation can be defined in that relation, and for all other Description(s) that use it, the isConceptUsedIn property should be applied. Notice therefore that not necessarily all Concept(s) isDefinedIn exactly 1 Description."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#isPostconditionOf> "Direct succession applied to situations. 
E.g., 'Taking some rest is a postcondition of my search for a hotel'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Community> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Goal> "The Description of a Situation that is desired by an Agent, and usually associated to a Plan that describes how to actually achieve it"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isDescribedBy> "è descritto da"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isAbout> "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection .
The isAbout relation is reflexive (not expressible in OWL1.0), because information objects are also about themselves."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Transition> "Transition"@en)AnnotationAssertion(rdfs:label <DUL.owl#concretelyExpresses> "esprime concretamente"@it)AnnotationAssertion(rdfs:label <DUL.owl#Abstract> "Abstract"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Place> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#includesObject> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Design> "Design"@it)AnnotationAssertion(rdfs:label <DUL.owl#introduces> "introduce"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PhysicalAttribute> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#Relation> "Relations are descriptions that can be considered as the counterpart of formal relations (that are included in the FormalEntity class).
For example, 'givingGrantToInstitution(x,y,z)' with three argument types: Provider(x),Grant(y),Recipient(z), can have a Relation counterpart: 'GivingGrantToInstitution', which defines three Concept instances: Provider,Grant,Recipient.
Since social objects are not formal entities, Relation includes here any 'relation-like' entity in common sense, including social relations."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#hasConstraint> "A relation between parameters and entities. It allows to assert generic constraints (encoded as parameters), e.g. MinimumAgeForDriving isConstraintFor John (where John is a legal subject under the TrafficLaw).
The intended semantics (not expressible in OWL) is that a Parameter isParameterFor a Concept that classifies an Entity; moreover, it entails that a Parameter parametrizes a Region that isRegionFor that Entity."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Process> "Processo"@it)AnnotationAssertion(rdfs:comment <DUL.owl#defines> "A relation between a Description and a Concept, e.g. a Workflow for a governmental Organization defines the Role 'officer', or 'the Italian Traffic Law defines the role Vehicle'."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Narrative> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#EventType> "Tipo di evento"@it)AnnotationAssertion(rdfs:label <DUL.owl#isRelatedToDescription> "è associata alla descrizione"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#TimeInterval> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isConstraintFor> "è un vincolo per"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#includesAction> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isParticipantIn> "A relation between an object and a process, e.g. 'John took part in the discussion', 'a large mass of snow fell during the avalanche', or 'a cook, some sugar, flour, etc. are all present in the cooking of a cake'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isRoleDefinedIn> "è un ruolo definito in"@it)AnnotationAssertion(rdfs:label <DUL.owl#Contract> "Contract"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Process> "This is a placeholder for events that are considered in their evolution, or anyway not strictly dependent on agents, tasks, and plans. 
See Event class for some thoughts on classifying events. See also 'Transition'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#SocialAgent> "Any individual whose existence is granted simply by its social communicability and capability of action (through some PhysicalAgent)."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasPrecondition> <DUL.owl>)AnnotationAssertion(rdfs:comment <DUL.owl#isConceptUsedIn> "A more generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#CollectiveAgent> "Agente collettivo"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isParticipantIn> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#Parameter> "Parametro"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Organization> "Un agente sociale strutturato internamente e creato convenzionalmente. Per agire, ha bisogno di ruoli e agenti che li ricoprano."@it)AnnotationAssertion(rdfs:label <DUL.owl#hasEventDate> "evento ha data"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isTimeIncludedIn> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#PhysicalPlace> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isTimeOfObservationOf> "is time of observation of"@en)AnnotationAssertion(rdfs:comment <DUL.owl#expands> "A partial order relation that holds between descriptions. It represents the proper part relation between a description and another description featuring the same properties as the former, with at least one additional one.
Descriptions can be expanded either by adding other descriptions as parts, or by refining concepts that are used by them. 
An 'intention' to expand must be present (unless purely formal theories are considered, but even in this case a criterion of relevance is usually active)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#DesignedArtifact> "Artefatto progettato"@it)AnnotationAssertion(rdfs:label <DUL.owl#includesObject> "include l'oggetto"@it)AnnotationAssertion(rdfs:label <DUL.owl#InformationRealization> "Informazione concreta"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Group> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Transition> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#hasLocation> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#realizes> "realizza"@it)AnnotationAssertion(rdfs:label <DUL.owl#TypeCollection> "Type collection"@en)AnnotationAssertion(rdfs:label <DUL.owl#InformationObject> "Information object"@en)AnnotationAssertion(rdfs:label <DUL.owl#follows> "follows"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Region> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasConstraint> "has constraint"@en)AnnotationAssertion(rdfs:label <DUL.owl#isParametrizedBy> "is parametrized by"@en)AnnotationAssertion(rdfs:label <DUL.owl#covers> "ricopre"@it)AnnotationAssertion(rdfs:label <DUL.owl#realizesInformationAbout> "realizes information about"@en)AnnotationAssertion(rdfs:comment <DUL.owl#isDefinedIn> "A relation between a Description and a Concept, e.g. a Workflow for a governmental Organization defines the Role 'officer', or 'the Italian Traffic Law defines the role Vehicle'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Quality> "Quality"@en)AnnotationAssertion(rdfs:comment <DUL.owl#executesTask> "A relation between an action and a task, e.g. 'putting some water in a pot and putting the pot on a fire until the water starts bubbling' executes the task 'boiling'."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#directlyFollows> "directly follows"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isConcretelyExpressedBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasParameterDataValue> "has parameter data value"@en)AnnotationAssertion(rdfs:comment <DUL.owl#coparticipatesWith> "A relation between two objects participating in a same Event; e.g., 'Vitas and Jimmy are playing tennis'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Norm> "A social norm."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isComponentOf> "is component of"@en)AnnotationAssertion(rdfs:label <DUL.owl#isObjectIncludedIn> "is object included in"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#sameSettingAs> "DUL.owl"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#CollectiveAgent> "Collective agent"@en)AnnotationAssertion(rdfs:label <DUL.owl#hasPart> "has part"@en)AnnotationAssertion(rdfs:label <DUL.owl#isTaskDefinedIn> "è un task definito in"@it)AnnotationAssertion(rdfs:comment <DUL.owl#hasMember> "A relation between collections and entities, e.g. 'my collection of saxophones includes an old Adolphe Sax original alto' (i.e. my collection has member an Adolphe Sax alto)."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#nearTo> "Generic distance relation between any Entity(s). E.g. Rome is near to Florence, astronomy is near to physics."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isComponentOf> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isPreconditionOf> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#introduces> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isConceptExpressedBy> "is concept expressed by"@en)AnnotationAssertion(rdfs:comment <DUL.owl#realizesInformationAbout> "The relation between entities and information realizations, e.g. between Italy and a paper copy of the text of the Italian Constitution."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isRelatedToConcept> "è associato al concetto"@it)AnnotationAssertion(rdfs:label <DUL.owl#Person> "Person"@en)AnnotationAssertion(rdfs:label <DUL.owl#isRelatedToDescription> "is related to description"@en)AnnotationAssertion(rdfs:label <DUL.owl#isSettingFor> "is setting for"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Configuration> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#PhysicalObject> "Oggetto fisico"@it)AnnotationAssertion(rdfs:label <DUL.owl#Diagnosis> "Diagnosi"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Quality> "Any aspect of an Entity (but not a part of it), which cannot exist without that Entity. For example, the way the surface of a specific PhysicalObject looks like, or the specific light of a place at a certain time, are examples of Quality, while the encoding of a Quality into e.g. a PhysicalAttribute should be modeled as a Region. 
From the design viewpoint, the Quality-Region distinction is useful only when individual aspects of an Entity are considered in a domain of discourse. 
For example, in an automotive context, it would be irrelevant to consider the aspects of car windows for a specific car, unless the factory wants to check a specific window against design parameters (anomaly detection). 
On the other hand, in an antiques context, the individual aspects for a specific piece of furniture are a major focus of attention, and may constitute the actual added value, because the design parameters for old furniture are often not fixed, and may not be viewed as 'anomalies'."^^xsd:string)AnnotationAssertion(rdfs:comment <DUL.owl#Collection> "Any container for entities that share one or more common properties. E.g. \"stone objects\", \"the nurses\", \"the Louvre Aegyptian collection\", all the elections for the Italian President of the Republic. 
A collection is not a logical class: a collection is a first-order entity, while a class is second-order."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Action> "Action"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Substance> "Any PhysicalBody that has not necessarily specified (designed) boundaries, e.g. a pile of trash, some sand, etc. 
In this sense, an artistic object made of trash or a dose of medicine in the form of a pill would be a FunctionalSubstance, and a DesignedArtifact, since its boundaries are specified by a Design; aleatoric objects that are outcomes of an artistic process might be still considered DesignedArtifact(s), and Substance(s)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Description> "Descrizione"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Agent> "Any agentive Object , either physical (e.g. a whale, a robot, an oak), or social (e.g. a corporation, an institution, a community)."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#isTaskOf> "is task of"@en)AnnotationAssertion(rdfs:label <DUL.owl#Norm> "Norma"@it)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#WorkflowExecution> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isConceptExpressedBy> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#coparticipatesWith> "copartecipa con"@it)AnnotationAssertion(rdfs:label <DUL.owl#hasDataValue> "ha valore"@it)AnnotationAssertion(rdfs:comment <DUL.owl#isTaskDefinedIn> "A relation between a description and a task, e.g. the task 'boil' is defined in a recipe for a cake."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Plan> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#isAbout> "is about"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Workflow> "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed, usually supporting the work of an Organization"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Collection> "Collezione"@it)AnnotationAssertion(rdfs:label <DUL.owl#includesEvent> "include l'evento"@it)AnnotationAssertion(rdfs:comment <DUL.owl#Transition> "A transition is a Situation that creates a context for three TimeInterval(s), two additional different Situation(s), one Event, one Process, and at least one Object: the Event is observed as the cause for the transition, one Situation is the state before the transition, the second Situation is the state after the transition, the Process is the invariance under some different transitions (including the one represented here), in which at least one Object is situated. Finally, the time intervals position the situations and the transitional event in time.
This class of situations partly encodes the ontology underlying typical engineering algebras for processes, e.g. Petri Nets. 
A full representation of the transition ontology is outside the expressivity of OWL, because we would need qualified cardinality restrictions,  coreference, property equivalence, and property composition."^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Collective> "Collettivo"@it)AnnotationAssertion(rdfs:comment <DUL.owl#overlaps> "A schematic relation between any entities, e.g. 'the chest region overlaps with the abdomen region', 'my spoken words overlap with hers', 'the time of my leave overlaps with the time of your arrival', 'fibromyalgia overlaps with other conditions'.
Subproperties and restrictions can be used to specialize overlaps for objects, events, time intervals, etc."^^xsd:string)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#Norm> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasCommonBoundary> "has common boundary"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isConstituentOf> <DUL.owl>)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#ChemicalObject> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#hasPostcondition> "ha postcondizione"@it)AnnotationAssertion(rdfs:label <DUL.owl#Group> "Group"@en)AnnotationAssertion(rdfs:comment <DUL.owl#Region> "Any region in a dimensional space (a dimensional space is a maximal Region), which can be used as a value for a quality of an Entity . For example, TimeInterval, SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses of Region. 
Regions are not data values in the ordinary knowledge representation sense; in order to get patterns for modelling data, see the properties: representsDataValue and hasDataValue"^^xsd:string)AnnotationAssertion(rdfs:label <DUL.owl#Configuration> "Configuration"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#isAbout> <DUL.owl>)AnnotationAssertion(rdfs:label <DUL.owl#realizesInformationAbout> "realizza informazione che si riferisce a a"@it)AnnotationAssertion(rdfs:label <DUL.owl#Organization> "Organization"@en)AnnotationAssertion(rdfs:isDefinedBy <DUL.owl#actsFor> <DUL.owl>)
AnnotationAssertion(<opla#isNativeTo> <list#hasSuccessor> "list"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <list#LastItem> "list"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <list#hasNext> "list"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <list#FirstItem> "list"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <list#ListItem> "list"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <spatialextent#hasValue> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#hasFirst> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#ReferenceSystem> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#isDefinedBy> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#hasReferenceSystem> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#hasLast> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#PointInSpace> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#PIS-Sequence> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#PIS-SequenceElement> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#contains> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#Interior> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#SpatialExtent> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#constitudtedBy> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#Value> "spatialextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatialextent#hasNext> "spatialextent"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasFix> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#SpatiotemporalExtent> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#Trajectory> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#Segment> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasFixInverse> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#endsAt> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasSegmentInverse> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#nextFix> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#StartingFix> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasTrajectory> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasSegment> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#Time> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#EndingFix> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#startsFrom> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasSuccessor> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#atPlace> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasSpatiotemporalExtent> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#Place> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasPredecessor> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#Fix> "spatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <spatiotemporalextent#Place> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#ofExternalType> <spatiotemporalextent#Time> "ofExternalType"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasNext> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#hasPrevious> "ExternalTypespatiotemporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <spatiotemporalextent#atTime> "ExternalTypespatiotemporalextent"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <stub#Stub> "stub"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <stub#hasValue> "stub"^^rdfs:Literal)
AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#TemporalExtent> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#ReferenceSystem> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#hasValue> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#endsAt> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#TimeInterval> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#PointInTime> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#hasReferenceSystem> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#contains> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#startsFrom> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#Value> "temporalextent"^^rdfs:Literal)AnnotationAssertion(<opla#hasRelatedPattern> <temporalextent#ComplexTemporalExtent> "temporalextent"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <trajectory#StartingFix> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasSegment> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#EndingFix> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasFix> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#Segment> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasFixInverse> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#startsFrom> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasNext> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasSuccessor> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#nextFix> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasPrevious> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasPredecessor> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#Trajectory> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#Fix> "trajectory"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <trajectory#hasSegmentInverse> "trajectory"^^rdfs:Literal)
AnnotationAssertion(<opla#isNativeTo> <tree#hasDescendant> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#hasAncestor> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#hasParent> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#hasOutDegree> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#RootNode> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#TreeNode> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#hasSibling> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#LeafNode> "tree"^^rdfs:Literal)AnnotationAssertion(<opla#isNativeTo> <tree#hasChild> "tree"^^rdfs:Literal)

